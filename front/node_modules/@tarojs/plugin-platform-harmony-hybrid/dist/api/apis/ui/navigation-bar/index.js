import { __rest } from '../../../../node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.js';
import { setTitle } from '@tarojs/router/dist/utils/navigate';
import native from '../../NativeApi.js';
import { shouldBeObject, getParameterError } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';
export { loadNavigationStyle, registerNavigationStyleHandler } from './style-event.js';

/**
 * 显示页面导航条加载图标
 *
 * @canUse showNavigationBarLoading
 */
const showNavigationBarLoading = (options) => {
    const { success, fail, complete } = (options || {});
    const handle = new MethodHandler({ name: 'showNavigationBarLoading', success, fail, complete });
    native.showNavigationBarLoading();
    return handle.success();
};
/**
 * 隐藏页面导航条加载图标
 *
 * @canUse hideNavigationBarLoading
 */
const hideNavigationBarLoading = (options) => {
    const { success, fail, complete } = (options || {});
    const handle = new MethodHandler({ name: 'hideNavigationBarLoading', success, fail, complete });
    native.hideNavigationBarLoading();
    return handle.success();
};
/**
 * 设置页面导航条标题
 *
 * @canUse setNavigationBarTitle
 * @__object [title]
 */
const setNavigationBarTitle = (options) => {
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `setNavigationBarTitle:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { title, success, fail, complete } = options;
    const handle = new MethodHandler({ name: 'setNavigationBarTitle', success, fail, complete });
    if (!title || typeof title !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'title',
                correct: 'String',
                wrong: title,
            }),
        });
    }
    setTitle(title);
    return handle.success();
};
/**
 * 设置页面导航条颜色
 *
 * @canUse setNavigationBarColor
 * @__object [backgroundColor, frontColor, animation]
 */
const setNavigationBarColor = (options) => {
    const apiName = 'setNavigationBarColor';
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `${apiName}:fail ${isObject.msg}` };
        return Promise.reject(res);
    }
    const _a = options, { frontColor, backgroundColor, success, fail, complete } = _a, otherOptions = __rest(_a, ["frontColor", "backgroundColor", "success", "fail", "complete"]);
    const handle = new MethodHandler({ name: apiName, success, fail, complete });
    if (!frontColor || typeof frontColor !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'frontColor',
                correct: 'String',
                wrong: frontColor,
            }),
        });
    }
    if (frontColor && !['#000000', '#ffffff'].includes(frontColor)) {
        return handle.fail({
            errMsg: `invalid frontColor "${frontColor}"`,
        });
    }
    if (!backgroundColor || typeof backgroundColor !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'backgroundColor',
                correct: 'String',
                wrong: backgroundColor,
            }),
        });
    }
    native.setNavigationBarColor(Object.assign({ frontColor, backgroundColor }, otherOptions));
    return handle.success();
};
/**
 * 隐藏返回首页按钮
 *
 * @canUse hideHomeButton
 * @null_implementation
 */
const hideHomeButton = () => Promise.resolve();

export { hideHomeButton, hideNavigationBarLoading, setNavigationBarColor, setNavigationBarTitle, showNavigationBarLoading };
//# sourceMappingURL=index.js.map
