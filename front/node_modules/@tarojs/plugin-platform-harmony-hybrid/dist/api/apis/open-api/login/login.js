import native from '../../NativeApi.js';
import { shouldBeObject } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';

/**
 * 调用接口获取登录凭证（code）
 *
 * @canUse login
 * @__object [timeout]
 * @__success [code]
 */
const login = (options) => {
    const name = 'login';
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `${name}:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { timeout, success, fail, complete } = options;
    const handle = new MethodHandler({ name, success, fail, complete });
    let loginPromise = new Promise((resolve, reject) => {
        native.login({
            success: (res) => {
                resolve(res);
            },
            fail: (err) => {
                reject(err);
            },
        });
    });
    if (typeof timeout === 'number' && timeout >= 0) {
        const timeoutPromise = new Promise((_resolve, reject) => {
            setTimeout(() => reject(new Error('timeout')), timeout);
        });
        loginPromise = Promise.race([loginPromise, timeoutPromise]);
    }
    return loginPromise.then((res) => handle.success(res), (err) => {
        if (err instanceof Error) {
            return handle.fail({ errMsg: err.message });
        }
        else {
            const { errMsg, errCode: code } = err;
            return handle.fail({ errMsg, code });
        }
    });
};

export { login };
//# sourceMappingURL=login.js.map
