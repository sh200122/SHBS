{"version":3,"file":"startSoterAuthentication.js","sources":["../../../../../src/api/apis/open-api/soter/startSoterAuthentication.ts"],"sourcesContent":["import Taro from '@tarojs/api'\n\nimport native from '../../NativeApi'\nimport { getParameterError, shouldBeObject } from '../../utils'\nimport { MethodHandler } from '../../utils/handler'\n\n/**\n * 开始 SOTER 生物认证。\n *\n * @canUse startSoterAuthentication\n * @__object [challenge, requestAuthModes, authContent]\n * @__success [authMode, errCode, resultJSON, resultJSONSignature]\n */\nexport const startSoterAuthentication: typeof Taro.startSoterAuthentication = (options) => {\n  const name = 'startSoterAuthentication'\n\n  // options must be an Object\n  const isObject = shouldBeObject(options)\n  if (!isObject.flag) {\n    const res = { errMsg: `${name}:fail ${isObject.msg}` }\n    console.error(res.errMsg)\n    return Promise.reject(res)\n  }\n\n  const { challenge, requestAuthModes, authContent, success, fail, complete } = options\n  const handle = new MethodHandler<{\n    authMode?: string\n    errCode?: number\n    errMsg?: string\n    resultJSON?: string\n    resultJSONSignature?: string\n  }>({ name, success, fail, complete })\n\n  if (typeof challenge !== 'string') {\n    return handle.fail({\n      errMsg: getParameterError({\n        para: 'challenge',\n        correct: 'String',\n        wrong: challenge,\n      }),\n    })\n  }\n\n  if (typeof requestAuthModes !== 'object') {\n    return handle.fail({\n      errMsg: getParameterError({\n        para: 'requestAuthModes',\n        correct: 'object',\n        wrong: requestAuthModes,\n      }),\n    })\n  }\n\n  return new Promise<Taro.startSoterAuthentication.SuccessCallbackResult>((resolve, reject) => {\n    native.startSoterAuthentication({\n      challenge: challenge,\n      requestAuthModes: requestAuthModes,\n      authContent: authContent,\n      success: (res: any) => {\n        handle.success(res, { resolve, reject })\n      },\n      fail: (err: any) => {\n        handle.fail(err, { resolve, reject })\n      },\n    })\n  })\n}\n"],"names":[],"mappings":";;;;AAMA;;;;;;AAMG;AACU,MAAA,wBAAwB,GAAyC,CAAC,OAAO,KAAI;IACxF,MAAM,IAAI,GAAG,0BAA0B,CAAA;;AAGvC,IAAA,MAAM,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,CAAA;AACxC,IAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;AAClB,QAAA,MAAM,GAAG,GAAG,EAAE,MAAM,EAAE,CAAA,EAAG,IAAI,CAAA,MAAA,EAAS,QAAQ,CAAC,GAAG,CAAA,CAAE,EAAE,CAAA;AACtD,QAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;AACzB,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;KAC3B;AAED,IAAA,MAAM,EAAE,SAAS,EAAE,gBAAgB,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAA;AACrF,IAAA,MAAM,MAAM,GAAG,IAAI,aAAa,CAM7B,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;AAErC,IAAA,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;QACjC,OAAO,MAAM,CAAC,IAAI,CAAC;YACjB,MAAM,EAAE,iBAAiB,CAAC;AACxB,gBAAA,IAAI,EAAE,WAAW;AACjB,gBAAA,OAAO,EAAE,QAAQ;AACjB,gBAAA,KAAK,EAAE,SAAS;aACjB,CAAC;AACH,SAAA,CAAC,CAAA;KACH;AAED,IAAA,IAAI,OAAO,gBAAgB,KAAK,QAAQ,EAAE;QACxC,OAAO,MAAM,CAAC,IAAI,CAAC;YACjB,MAAM,EAAE,iBAAiB,CAAC;AACxB,gBAAA,IAAI,EAAE,kBAAkB;AACxB,gBAAA,OAAO,EAAE,QAAQ;AACjB,gBAAA,KAAK,EAAE,gBAAgB;aACxB,CAAC;AACH,SAAA,CAAC,CAAA;KACH;IAED,OAAO,IAAI,OAAO,CAAsD,CAAC,OAAO,EAAE,MAAM,KAAI;QAC1F,MAAM,CAAC,wBAAwB,CAAC;AAC9B,YAAA,SAAS,EAAE,SAAS;AACpB,YAAA,gBAAgB,EAAE,gBAAgB;AAClC,YAAA,WAAW,EAAE,WAAW;AACxB,YAAA,OAAO,EAAE,CAAC,GAAQ,KAAI;gBACpB,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAA;aACzC;AACD,YAAA,IAAI,EAAE,CAAC,GAAQ,KAAI;gBACjB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAA;aACtC;AACF,SAAA,CAAC,CAAA;AACJ,KAAC,CAAC,CAAA;AACJ;;;;"}