import { NativeDataChangeListener } from "./NativeApiSyncCacheProxy.js";
declare class NativeApi {
    // @ts-ignore
    registerNativeListener(listener: NativeDataChangeListener | null): void;
    getWindowInfo(): any;
    // @ts-ignore
    getDeviceInfo(): any;
    getSystemInfoSync(): any;
    getSystemSetting(): any;
    getAppBaseInfo(): any;
    getAppAuthorizeSetting(): any;
    // @ts-ignore
    setNavigationBarColor(options: any): any;
    getMenuButtonBoundingClientRect(): any;
    // @ts-ignore
    request(options: any): any;
    // @ts-ignore
    saveDataUrlToFile(options: any): any;
    // @ts-ignore
    copyFileToSandboxCache(options: any): any;
    // @ts-ignore
    startAccelerometer(options: any): any;
    // @ts-ignore
    stopAccelerometer(options: any): any;
    // @ts-ignore
    onAccelerometerChange(options: any): any;
    // @ts-ignore
    offAccelerometerChange(options: any): any;
    // @ts-ignore
    startCompass(options: any): any;
    // @ts-ignore
    stopCompass(options: any): any;
    // @ts-ignore
    onCompassChange(options: any): any;
    // @ts-ignore
    offCompassChange(options: any): any;
    // @ts-ignore
    startGyroscope(options: any): any;
    // @ts-ignore
    stopGyroscope(options: any): any;
    // @ts-ignore
    onGyroscopeChange(options: any): any;
    // @ts-ignore
    saveImageToPhotosAlbum(options: any): any;
    saveVideoToPhotosAlbum(options: any): any;
    compressImage(options: any): any;
    showNavigationBarLoading(): void;
    hideNavigationBarLoading(): void;
    startSoterAuthentication(options: any): any;
    checkIsSupportSoterAuthentication(options: any): any;
    checkIsSoterEnrolledInDevice(options: any): any;
    // @ts-ignore
    chooseMediaAssets(options: any): any;
    // @ts-ignore
    chooseMediumAssets(options: any): any;
    // @ts-ignore
    getVideoInfo(options: any): any;
    // @ts-ignore
    getImageInfo(options: any): any;
    // @ts-ignore
    compressVideo(options: any): any;
    // @ts-ignore
    openDocument(options: any): any;
    // @ts-ignore
    login(options: any): any;
    // @ts-ignore
    setNavigationStyle(options: any): void;
    // @ts-ignore
    setCapsuleState(options: any): void;
    // @ts-ignore
    getCapsuleState(options: any): any;
    // @ts-ignore
    getUserInfo(options: any): any;
    // @ts-ignore
    openSetting(options: any): any;
    // @ts-ignore
    getSetting(options: any): any;
    // @ts-ignore
    setKeepScreenOn(options: any): any;
    // @ts-ignore
    onUserCaptureScreen(options: any): any;
    // @ts-ignore
    offUserCaptureScreen(options: any): any;
    // @ts-ignore
    setScreenBrightness(options: any): any;
    // @ts-ignore
    getScreenBrightness(options: any): any;
    // @ts-ignore
    hideKeyboard(options?: any): any;
    // @ts-ignore
    onKeyboardHeightChange(options?: any): any;
    // @ts-ignore
    offKeyboardHeightChange(options?: any): any;
    // @ts-ignore
    makePhoneCall(options: any): any;
    // @ts-ignore
    getSavedFileList(options: any): any;
    // @ts-ignore
    removeSavedFile(options: any): any;
    // @ts-ignore
    getSavedFileInfo(options: any): any;
    // @ts-ignore
    addPhoneContact(options: any): any;
    // @ts-ignore
    scanCode(options: any): any;
    // @ts-ignore
    vibrateShort(options: any): any;
    // @ts-ignore
    vibrateLong(options: any): any;
    // NativeUpdateManager
    // @ts-ignore
    applyUpdate(): any;
    // @ts-ignore
    onCheckForUpdate(options: any): any;
    // @ts-ignore
    onUpdateFailed(options: any): any;
    // @ts-ignore
    onUpdateReady(options: any): any;
    // @ts-ignore
    downloadFile(options: any): any;
    // NativeFileSystemManager
    // @ts-ignore
    getFileManager(): any;
    // @ts-ignore
    access(option: any): any;
    // @ts-ignore
    saveFile(option: any): any;
    getFileInformation(_option: any): void;
    getFileInfo(_option: any): void;
    // @ts-ignore
    readFile(option: any): any;
    // @ts-ignore
    readFileSync(option: any): any;
    // @ts-ignore
    openAppAuthorizeSetting(option: any): any;
    // @ts-ignore
    requestSubscribeMessage(option: any): any;
    // @ts-ignore
    closeBLEConnection(option: any): any;
    // @ts-ignore
    createBLEConnection(option: any): any;
    // @ts-ignore
    getBLEDeviceCharacteristics(option: any): any;
    // @ts-ignore
    getBLEDeviceRSSI(option: any): any;
    // @ts-ignore
    getBLEDeviceServices(option: any): any;
    // @ts-ignore
    notifyBLECharacteristicValueChange(option: any): any;
    // @ts-ignore
    onBLECharacteristicValueChange(option: any): any;
    // @ts-ignore
    onBLEConnectionStateChange(option: any): any;
    // @ts-ignore
    readBLECharacteristicValue(option: any): any;
    // @ts-ignore
    setBLEMTU(option: any): any;
    // @ts-ignore
    writeBLECharacteristicValue(option: any): any;
    // @ts-ignore
    closeBluetoothAdapter(option: any): any;
    // @ts-ignore
    getBluetoothAdapterState(option: any): any;
    // @ts-ignore
    getBluetoothDevices(option: any): any;
    // @ts-ignore
    getConnectedBluetoothDevices(option: any): any;
    // @ts-ignore
    offBluetoothAdapterStateChange(option: any): any;
    // @ts-ignore
    offBluetoothDeviceFound(option: any): any;
    // @ts-ignore
    onBluetoothAdapterStateChange(option: any): any;
    // @ts-ignore
    onBluetoothDeviceFound(option: any): any;
    // @ts-ignore
    openBluetoothAdapter(option: any): any;
    // @ts-ignore
    startBluetoothDevicesDiscovery(option: any): any;
    // @ts-ignore
    stopBluetoothDevicesDiscovery(option: any): any;
    // @ts-ignore
    // @(syncAndRelease)
    // getExecStatus (option: any): any {
    //   // 获取缓存数据
    //   return option
    // }
    setStorage(option: any): any;
    removeStorage(option: any): any;
    // @ts-ignore
    getStorage(option: any): any;
    getStorageSync(key: any): any;
    batchGetPageShowDataStorage(options: any): any;
    updatePageShowDataKeys(options: any): any;
    getStorageInfo(option: any): any;
    clearStorage(option: any): any;
    callInstance(option: any): any;
    createInstance(option: any): any;
    syncAndReleaseInstance(option: any): any;
    callInstanceAsync(option: any): any;
    onNativeNavigate(_options: any): void;
    exitMiniProgram(option?: any): any;
    onStorageStatusChange(_options: any): void;
    offStorageStatusChange(_options: any): void;
}
interface Status {
    done: boolean;
    data: string;
    errorMsg: string;
}
declare let native: NativeApi;
export { native as default, NativeApi, Status };
