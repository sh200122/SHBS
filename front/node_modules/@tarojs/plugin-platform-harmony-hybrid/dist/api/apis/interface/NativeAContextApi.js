import { ClassInstanceManager } from './ClassInstanceManager.js';

class NativeInnerAudioContext {
    constructor() {
        this.className = 'NativeInnerAudioContext';
        this.objectId = ClassInstanceManager.getInstance().createInstance(this.className);
    }
    static createInnerAudioContext() {
        return new NativeInnerAudioContext();
    }
    get autoplay() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'autoplay', this.objectId);
    }
    set autoplay(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'autoplay', this.objectId);
    }
    get buffered() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'buffered', this.objectId);
    }
    set buffered(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'buffered', this.objectId);
    }
    get currentTime() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'currentTime', this.objectId);
    }
    set currentTime(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'currentTime', this.objectId);
    }
    get duration() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'duration', this.objectId);
    }
    set duration(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'duration', this.objectId);
    }
    get loop() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'loop', this.objectId);
    }
    set loop(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'loop', this.objectId);
    }
    get obeyMuteSwitch() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'obeyMuteSwitch', this.objectId);
    }
    set obeyMuteSwitch(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'obeyMuteSwitch', this.objectId);
    }
    get paused() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'paused', this.objectId);
    }
    set paused(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'paused', this.objectId);
    }
    get playbackRate() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'playbackRate', this.objectId);
    }
    set playbackRate(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'playbackRate', this.objectId);
    }
    get src() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'src', this.objectId);
    }
    set src(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'src', this.objectId);
    }
    get startTime() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'startTime', this.objectId);
    }
    set startTime(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'startTime', this.objectId);
    }
    get volume() {
        return ClassInstanceManager.getInstance().getInstanceValue(this.className, 'volume', this.objectId);
    }
    set volume(value) {
        ClassInstanceManager.getInstance().setInstanceValue(value, this.className, 'volume', this.objectId);
    }
    destroy() {
        ClassInstanceManager.getInstance().destroyInstance(this.className, this.objectId);
    }
    onEnded(options) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(options, this.className, 'onEnded', this.objectId);
    }
    onError(options) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(options, this.className, 'onError', this.objectId);
    }
    onPlay(options) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(options, this.className, 'onPlay', this.objectId);
    }
    onStop(options) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(options, this.className, 'onStop', this.objectId);
    }
    pause() {
        return ClassInstanceManager.getInstance().setInstanceFunction({}, this.className, 'pause', this.objectId);
    }
    play() {
        return ClassInstanceManager.getInstance().setInstanceFunction({}, this.className, 'play', this.objectId);
    }
    stop() {
        return ClassInstanceManager.getInstance().setInstanceFunction({}, this.className, 'stop', this.objectId);
    }
    offCanplay(option) {
        return option;
    }
    offEnded(option) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'offEnded', this.objectId);
    }
    offError(option) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'offError', this.objectId);
    }
    offPause(option) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'offPause', this.objectId);
    }
    offPlay(option) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'offPlay', this.objectId);
    }
    offStop(option) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'offStop', this.objectId);
    }
    onPause(option) {
        return ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'onPause', this.objectId);
    }
    offTimeUpdate(option) {
        return option;
    }
    offSeeked(option) {
        return option;
    }
    offSeeking(option) {
        return option;
    }
    offWaiting(option) {
        return option;
    }
    onCanplay(option) {
        return option;
    }
    onSeeked(option) {
        return option;
    }
    onSeeking(option) {
        return option;
    }
    onTimeUpdate(option) {
        return option;
    }
    onWaiting(option) {
        return option;
    }
    seek(option) {
        return option;
    }
}

export { NativeInnerAudioContext };
//# sourceMappingURL=NativeAContextApi.js.map
