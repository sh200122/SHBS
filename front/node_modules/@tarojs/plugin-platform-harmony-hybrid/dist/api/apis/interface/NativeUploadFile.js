import { ClassInstanceManager } from './ClassInstanceManager.js';

class NativeUploadFile {
    constructor(option) {
        this.className = 'NativeUploadFile';
        const options = Object.assign(Object.assign({}, option), { success: (res) => {
                option === null || option === void 0 ? void 0 : option.success(res);
                this.destroy();
            }, fail: (res) => {
                option === null || option === void 0 ? void 0 : option.fail(res);
                this.destroy();
            } });
        this.objectId = ClassInstanceManager.getInstance().createInstance(this.className, options);
    }
    static getUploadTask(option) {
        return new NativeUploadFile(option);
    }
    abort() {
        ClassInstanceManager.getInstance().setInstanceFunction({}, this.className, 'abort', this.objectId);
        this.destroy();
    }
    offHeadersReceived(option) {
        ClassInstanceManager.getInstance().setInstanceFunction(option, this.className, 'offHeadersReceived', this.objectId);
    }
    offProgressUpdate(option) {
        ClassInstanceManager.getInstance().setInstanceFunction(option, this.className, 'offProgressUpdate', this.objectId);
    }
    onHeadersReceived(option) {
        ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'onHeadersReceived', this.objectId);
    }
    onProgressUpdate(option) {
        ClassInstanceManager.getInstance().setInstanceFunctionAsync(option, this.className, 'onProgressUpdate', this.objectId);
    }
    destroy() {
        ClassInstanceManager.getInstance().destroyInstance(this.className, this.objectId);
    }
}

export { NativeUploadFile };
//# sourceMappingURL=NativeUploadFile.js.map
