import { toByteArray } from 'base64-js';
import native from '../NativeApi.js';

class NativeFileSystemManager {
    constructor() {
        native.getFileManager();
    }
    static getFileSystemManager() {
        if (!NativeFileSystemManager.nativeFileSystemManager) {
            NativeFileSystemManager.nativeFileSystemManager = new NativeFileSystemManager();
        }
        return NativeFileSystemManager.nativeFileSystemManager;
    }
    access(option) {
        native.access(option);
    }
    getFileInfo(option) {
        native.getFileInformation(option);
    }
    readFile(option) {
        native.readFile(Object.assign(Object.assign({}, (option || {})), { success: (res) => {
                const result = {
                    data: (res === null || res === void 0 ? void 0 : res.bufBase64) !== undefined ? toByteArray(res.bufBase64).buffer : res === null || res === void 0 ? void 0 : res.result,
                };
                (option === null || option === void 0 ? void 0 : option.success) && option.success(result);
                (option === null || option === void 0 ? void 0 : option.complete) && option.complete(result);
            }, fail: (res) => {
                (option === null || option === void 0 ? void 0 : option.fail) && option.fail(res);
                (option === null || option === void 0 ? void 0 : option.complete) && option.complete(res);
            } }));
    }
    readFileSync(filePath, encoding, position, length) {
        const data = native.readFileSync({
            filePath,
            encoding,
            position,
            length,
        });
        if (data === null || data === void 0 ? void 0 : data.error) {
            throw data.error;
        }
        return (data === null || data === void 0 ? void 0 : data.bufBase64) !== undefined ? toByteArray(data.bufBase64).buffer : data === null || data === void 0 ? void 0 : data.result;
    }
    accessSync(option) {
        return option;
    }
    appendFile(option) {
        return option;
    }
    appendFileSync(option) {
        return option;
    }
    close(option) {
        return option;
    }
    closeSync(option) {
        return option;
    }
    copyFile(option) {
        return option;
    }
    copyFileSync(option) {
        return option;
    }
    fstat(option) {
        return option;
    }
    fstatSync(option) {
        return option;
    }
    ftruncate(option) {
        return option;
    }
    ftruncateSync(option) {
        return option;
    }
    getSavedFileList(option) {
        return option;
    }
    mkdir(option) {
        return option;
    }
    mkdirSync(option) {
        return option;
    }
    open(option) {
        return option;
    }
    openSync(option) {
        return option;
    }
    read(option) {
        return option;
    }
    readCompressedFile(option) {
        return option;
    }
    readCompressedFileSync(option) {
        return option;
    }
    readSync(option) {
        return option;
    }
    readZipEntry(option) {
        return option;
    }
    readdir(option) {
        return option;
    }
    readdirSync(option) {
        return option;
    }
    removeSavedFile(option) {
        return option;
    }
    rename(option) {
        return option;
    }
    renameSync(option) {
        return option;
    }
    rmdir(option) {
        return option;
    }
    rmdirSync(option) {
        return option;
    }
    saveFile(option) {
        return option;
    }
    saveFileSync(option) {
        return option;
    }
    stat(option) {
        return option;
    }
    statSync(option) {
        return option;
    }
    truncate(option) {
        return option;
    }
    truncateSync(option) {
        return option;
    }
    unlink(option) {
        return option;
    }
    unlinkSync(option) {
        return option;
    }
    unzip(option) {
        return option;
    }
    write(option) {
        return option;
    }
    writeFile(option) {
        return option;
    }
    writeFileSync(option) {
        return option;
    }
    writeSync(option) {
        return option;
    }
}

export { NativeFileSystemManager };
//# sourceMappingURL=NativeFileSystemManager.js.map
