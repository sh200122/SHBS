import native from '../NativeApi.js';

class ClassInstanceManager {
    constructor() {
        this.classIdMap = new Map();
    }
    static getInstance() {
        if (!ClassInstanceManager.INSTANCE) {
            ClassInstanceManager.INSTANCE = new ClassInstanceManager();
        }
        return ClassInstanceManager.INSTANCE;
    }
    createInstance(className, option) {
        const objectId = native.createInstance(Object.assign(Object.assign({}, option), { className: className }));
        if (!this.classIdMap.has(className)) {
            this.classIdMap.set(className, []);
        }
        this.classIdMap.get(className).push(objectId);
        return objectId;
    }
    getInstanceValue(className, name, objectId) {
        return native.callInstance({
            type: 'get',
            className: className,
            property: name,
            objectId: objectId
        });
    }
    setInstanceValue(option, className, name, objectId) {
        return native.callInstance({
            option: option,
            className: className,
            type: 'set',
            property: name,
            objectId: objectId
        });
    }
    setInstanceFunction(option, className, name, objectId) {
        return native.callInstance({
            option: option,
            className: className,
            type: 'function',
            property: name,
            objectId: objectId
        });
    }
    setInstanceFunctionAsync(option, className, name, objectId) {
        return native.callInstanceAsync({
            option: option,
            className: className,
            type: 'function',
            property: name,
            objectId: objectId
        });
    }
    destroyInstance(className, objectId) {
        const instances = this.classIdMap.get(className);
        if (instances) {
            const index = instances.indexOf(objectId);
            if (index !== -1) {
                instances.splice(index, 1);
            }
            native.syncAndReleaseInstance({ className: className, option: this.classIdMap.get(className) });
        }
    }
}

export { ClassInstanceManager };
//# sourceMappingURL=ClassInstanceManager.js.map
