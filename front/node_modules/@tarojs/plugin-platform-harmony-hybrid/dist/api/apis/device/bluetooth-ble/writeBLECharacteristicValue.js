import { shouldBeObject, getParameterError } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';
import native from '../../NativeApi.js';

/**
 * 向低功耗蓝牙设备特征值中写入二进制数据
 *
 * @canUse writeBLECharacteristicValue
 * @__object [characteristicId, deviceId, serviceId, value]
 */
const writeBLECharacteristicValue = (options) => {
    const name = 'writeBLECharacteristicValue';
    return new Promise((resolve, reject) => {
        // options must be an Object
        const isObject = shouldBeObject(options);
        if (!isObject.flag) {
            const res = { errMsg: `${name}:fail ${isObject.msg}` };
            console.error(res.errMsg);
            return reject(res);
        }
        const { characteristicId, deviceId, serviceId, value, success, fail, complete } = options;
        const handle = new MethodHandler({ name, success, fail, complete });
        // options.object must be object
        if (typeof characteristicId !== 'string') {
            return handle.fail({
                errMsg: getParameterError({
                    para: 'characteristicId',
                    correct: 'string',
                    wrong: characteristicId,
                }),
            }, { resolve, reject });
        }
        if (typeof deviceId !== 'string') {
            return handle.fail({
                errMsg: getParameterError({
                    para: 'deviceId',
                    correct: 'string',
                    wrong: deviceId,
                }),
            }, { resolve, reject });
        }
        if (typeof serviceId !== 'string') {
            return handle.fail({
                errMsg: getParameterError({
                    para: 'serviceId',
                    correct: 'string',
                    wrong: serviceId,
                }),
            }, { resolve, reject });
        }
        // options.value must be object
        if (typeof value !== 'object') {
            return handle.fail({
                errMsg: getParameterError({
                    para: 'value',
                    correct: 'object',
                    wrong: value,
                }),
            }, { resolve, reject });
        }
        native.writeBLECharacteristicValue({
            characteristicId: characteristicId,
            deviceId: deviceId,
            serviceId: serviceId,
            value: value,
            success: (res) => {
                const result = {
                    /** 错误信息 */
                    errMsg: '',
                    /** 错误码 */
                    errCode: res[0],
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail(err, { resolve, reject });
            },
        });
    });
};

export { writeBLECharacteristicValue };
//# sourceMappingURL=writeBLECharacteristicValue.js.map
