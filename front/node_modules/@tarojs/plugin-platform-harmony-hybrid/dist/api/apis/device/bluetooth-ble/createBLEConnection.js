import { shouldBeObject, getParameterError } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';
import native from '../../NativeApi.js';

/**
 * 连接低功耗蓝牙设备
 *
 * @canUse createBLEConnection
 * @__object [deviceId, timeout]
 */
const createBLEConnection = (options) => {
    const name = 'createBLEConnection';
    return new Promise((resolve, reject) => {
        // options must be an Object
        const isObject = shouldBeObject(options);
        if (!isObject.flag) {
            const res = { errMsg: `${name}:fail ${isObject.msg}` };
            console.error(res.errMsg);
            return reject(res);
        }
        const { deviceId, timeout, success, fail, complete } = options;
        const handle = new MethodHandler({ name, success, fail, complete });
        // options.deviceId must be string
        if (typeof deviceId !== 'string') {
            return handle.fail({
                errMsg: getParameterError({
                    para: 'deviceId',
                    correct: 'string',
                    wrong: deviceId,
                }),
            }, { resolve, reject });
        }
        native.createBLEConnection({
            deviceId: deviceId,
            timeout: timeout,
            success: (res) => {
                const result = {
                    /** 错误信息 */
                    errMsg: '',
                    /** 错误码 */
                    errCode: res[0],
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail(err, { resolve, reject });
            },
        });
    });
};

export { createBLEConnection };
//# sourceMappingURL=createBLEConnection.js.map
