{"version":3,"file":"upload.js","sources":["../../../../src/api/apis/network/upload.ts"],"sourcesContent":["import { isFunction } from '@tarojs/shared'\n\nimport { NativeUploadFile } from '../interface/NativeUploadFile'\nimport { getParameterError, shouldBeObject } from '../utils'\n/**\n * 将本地资源上传到服务器\n *\n * @canUse uploadFile\n * @__object [url, filePath, name, header, formData, timeout, fileName, withCredentials]\n * @__success [data, statusCode, header, cookies]\n */\nexport const uploadFile = (options) => {\n  const apiName = 'uploadFile'\n\n  const isObject = shouldBeObject(options)\n  if (!isObject.flag) {\n    const res = { errMsg: `${apiName}:fail ${isObject.msg}` }\n    return Promise.reject(res)\n  }\n\n  const { url, filePath, name, success, fail, complete, ...otherOptions } = options as Exclude<\n    typeof options,\n  undefined\n  >\n  const requireOptions = { url, filePath, name }\n  for (const option in requireOptions) {\n    if (typeof requireOptions[option] !== 'string') {\n      const res = {\n        errMsg: getParameterError({\n          para: option,\n          correct: 'string',\n          wrong: requireOptions[option],\n        }),\n      }\n      isFunction(fail) && fail(res)\n      isFunction(complete) && complete(res)\n      return Promise.reject(res)\n    }\n  }\n\n  const task = NativeUploadFile.getUploadTask({\n    url,\n    filePath,\n    name,\n    ...otherOptions,\n    success: (res: any) => {\n      isFunction(success) && success(res)\n    },\n    fail: (res: any) => {\n      isFunction(fail) && fail(res)\n    },\n    complete: (res: any) => {\n      isFunction(complete) && complete(res)\n    },\n  })\n\n  /**\n   * 一个可以监听上传进度变化事件，以及取消上传任务的对象\n   *\n   * @canUse UploadTask\n   * @__class [abort, onProgressUpdate, offProgressUpdate, onHeadersReceived, offHeadersReceived]\n   */\n  const promise = Promise.resolve(task)\n  const taskMethods = ['abort', 'onHeadersReceived', 'offHeadersReceived', 'onProgressUpdate', 'offProgressUpdate']\n  task &&\n    taskMethods.forEach((method) => {\n      if (method in task) {\n        promise[method] = task[method].bind(task)\n      }\n    })\n  return promise\n}\n"],"names":[],"mappings":";;;;;AAIA;;;;;;AAMG;AACU,MAAA,UAAU,GAAG,CAAC,OAAO,KAAI;IACpC,MAAM,OAAO,GAAG,YAAY,CAAA;AAE5B,IAAA,MAAM,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,CAAA;AACxC,IAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;AAClB,QAAA,MAAM,GAAG,GAAG,EAAE,MAAM,EAAE,CAAA,EAAG,OAAO,CAAA,MAAA,EAAS,QAAQ,CAAC,GAAG,CAAA,CAAE,EAAE,CAAA;AACzD,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;KAC3B;IAED,MAAM,EAAA,GAAoE,OAGzE,EAHK,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAA,GAAA,EAGnD,EAHwD,YAAY,GAAA,MAAA,CAAA,EAAA,EAA/D,CAAiE,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,MAAA,EAAA,UAAA,CAAA,CAGtE,CAAA;IACD,MAAM,cAAc,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAA;AAC9C,IAAA,KAAK,MAAM,MAAM,IAAI,cAAc,EAAE;QACnC,IAAI,OAAO,cAAc,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;AAC9C,YAAA,MAAM,GAAG,GAAG;gBACV,MAAM,EAAE,iBAAiB,CAAC;AACxB,oBAAA,IAAI,EAAE,MAAM;AACZ,oBAAA,OAAO,EAAE,QAAQ;AACjB,oBAAA,KAAK,EAAE,cAAc,CAAC,MAAM,CAAC;iBAC9B,CAAC;aACH,CAAA;YACD,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAA;YAC7B,UAAU,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAA;AACrC,YAAA,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;SAC3B;KACF;AAED,IAAA,MAAM,IAAI,GAAG,gBAAgB,CAAC,aAAa,+BACzC,GAAG;QACH,QAAQ;QACR,IAAI,EAAA,EACD,YAAY,CACf,EAAA,EAAA,OAAO,EAAE,CAAC,GAAQ,KAAI;YACpB,UAAU,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAA;AACrC,SAAC,EACD,IAAI,EAAE,CAAC,GAAQ,KAAI;YACjB,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAA;AAC/B,SAAC,EACD,QAAQ,EAAE,CAAC,GAAQ,KAAI;YACrB,UAAU,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAA;AACvC,SAAC,IACD,CAAA;AAEF;;;;;AAKG;IACH,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AACrC,IAAA,MAAM,WAAW,GAAG,CAAC,OAAO,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAA;IACjH,IAAI;AACF,QAAA,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;AAC7B,YAAA,IAAI,MAAM,IAAI,IAAI,EAAE;AAClB,gBAAA,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aAC1C;AACH,SAAC,CAAC,CAAA;AACJ,IAAA,OAAO,OAAO,CAAA;AAChB;;;;"}