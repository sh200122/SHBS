import { __rest } from '../../../node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.js';
import { isFunction } from '@tarojs/shared';
import { NativeUploadFile } from '../interface/NativeUploadFile.js';
import { shouldBeObject, getParameterError } from '../utils/index.js';

/**
 * 将本地资源上传到服务器
 *
 * @canUse uploadFile
 * @__object [url, filePath, name, header, formData, timeout, fileName, withCredentials]
 * @__success [data, statusCode, header, cookies]
 */
const uploadFile = (options) => {
    const apiName = 'uploadFile';
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `${apiName}:fail ${isObject.msg}` };
        return Promise.reject(res);
    }
    const _a = options, { url, filePath, name, success, fail, complete } = _a, otherOptions = __rest(_a, ["url", "filePath", "name", "success", "fail", "complete"]);
    const requireOptions = { url, filePath, name };
    for (const option in requireOptions) {
        if (typeof requireOptions[option] !== 'string') {
            const res = {
                errMsg: getParameterError({
                    para: option,
                    correct: 'string',
                    wrong: requireOptions[option],
                }),
            };
            isFunction(fail) && fail(res);
            isFunction(complete) && complete(res);
            return Promise.reject(res);
        }
    }
    const task = NativeUploadFile.getUploadTask(Object.assign(Object.assign({ url,
        filePath,
        name }, otherOptions), { success: (res) => {
            isFunction(success) && success(res);
        }, fail: (res) => {
            isFunction(fail) && fail(res);
        }, complete: (res) => {
            isFunction(complete) && complete(res);
        } }));
    /**
     * 一个可以监听上传进度变化事件，以及取消上传任务的对象
     *
     * @canUse UploadTask
     * @__class [abort, onProgressUpdate, offProgressUpdate, onHeadersReceived, offHeadersReceived]
     */
    const promise = Promise.resolve(task);
    const taskMethods = ['abort', 'onHeadersReceived', 'offHeadersReceived', 'onProgressUpdate', 'offProgressUpdate'];
    task &&
        taskMethods.forEach((method) => {
            if (method in task) {
                promise[method] = task[method].bind(task);
            }
        });
    return promise;
};

export { uploadFile };
//# sourceMappingURL=upload.js.map
