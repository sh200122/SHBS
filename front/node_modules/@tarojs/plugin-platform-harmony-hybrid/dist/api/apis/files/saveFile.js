import { shouldBeObject, getParameterError } from '../utils/index.js';
import { MethodHandler } from '../utils/handler.js';
import native from '../NativeApi.js';

/**
 * 保存文件到本地
 *
 * @canUse saveFile
 * @__object [tempFilePath, filePath]
 * @__success [savedFilePath]
 */
const saveFile = (options) => {
    const name = 'saveFile';
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `${name}:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { tempFilePath, filePath, success, fail, complete } = options;
    const handle = new MethodHandler({ name, success, fail, complete });
    // options.url must be String
    if (typeof tempFilePath !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'tempFilePath',
                correct: 'string',
                wrong: tempFilePath,
            }),
        });
    }
    return new Promise((resolve, reject) => {
        native.saveFile({
            tempFilePath: tempFilePath,
            filePath: filePath,
            success: (res) => {
                const result = {
                    savedFilePath: res.savedFilePath,
                    errMsg: res.errMsg,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                const errRet = {
                    errMsg: err.errMsg,
                };
                handle.fail(errRet, { resolve, reject });
            },
        });
    });
};

export { saveFile };
//# sourceMappingURL=saveFile.js.map
