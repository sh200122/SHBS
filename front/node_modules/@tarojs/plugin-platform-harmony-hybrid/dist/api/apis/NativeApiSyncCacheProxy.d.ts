declare class NativeDataCache {
    private cache;
    keys(): string[];
    set(key: string, value: any): void;
    get(key: string): any;
    delete(key: string): boolean;
    has(key: string): boolean;
}
/**
 * 系统数据更新监听器
 */
interface NativeDataChangeListener {
    /**
     * 更新
     * @param methodName    要更新的方法名
     * @param methodArgs    要更新的方法参数，如果是空参，直接传[]
     */
    change: (methodName: string, methodArgs: any[]) => void;
    /**
     * 注册
     * @param methodName    要注册的方法名列表
     */
    register: (methodNames: string[]) => void;
    /**
     * 解注册
     * @param methodName    要解注册的方法名列表
     */
    unregister: (methodNames: string[]) => void;
}
/**
 * 同步数据缓存ProxyHandler
 */
declare class SyncCacheProxyHandler {
    private readonly nativeApi;
    private readonly listener;
    private readonly cache;
    private enableMethodNames;
    constructor(nativeApi: any);
    /**
     * 更新Native数据
     * @param cache         缓存数据
     * @param methodName    要更新的方法名
     * @param methodArgs    要更新的方法参数
     */
    /**
     * 更新Native数据
     * @param cache         缓存数据
     * @param methodName    要更新的方法名
     * @param methodArgs    要更新的方法参数
     */
    private updateNativeData;
    /**
     * 生成cache的存储key
     * @param methodName    方法名
     * @param methodArgs    方法参数
     */
    /**
     * 生成cache的存储key
     * @param methodName    方法名
     * @param methodArgs    方法参数
     */
    private generateCacheKey;
    get(target: any, propKey: string | symbol, receiver: any): any;
}
export { NativeDataCache, NativeDataChangeListener, SyncCacheProxyHandler };
