import { shouldBeObject, getParameterError } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';

/**
 * 打开视频编辑器
 *
 * @canUse openVideoEditor
 * @__object [filePath]
 * @__success [duration, size, tempFilePath, tempThumbPath]
 */
const openVideoEditor = (options) => {
    const name = 'openVideoEditor';
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `${name}:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { filePath, success, fail, complete } = options;
    const handle = new MethodHandler({ name, success, fail, complete });
    // options.url must be String
    if (typeof filePath !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'filePath',
                correct: 'string',
                wrong: filePath,
            }),
        });
    }
    return new Promise((resolve, reject) => {
        // @ts-ignore
        native.openVideoEditor({
            filePath: filePath,
            success: (res) => {
                const result = {
                    duration: res.duration,
                    size: res.size,
                    tempFilePath: res.tempFilePath,
                    tempThumbPath: res.tempThumbPath,
                    errMsg: res.errMsg,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail(err, { resolve, reject });
            },
        });
    });
};

export { openVideoEditor };
//# sourceMappingURL=openVideoEditor.js.map
