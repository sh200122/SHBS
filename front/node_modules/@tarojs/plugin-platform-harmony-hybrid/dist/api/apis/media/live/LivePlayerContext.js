/**
 * LivePlayerContext 实例
 *
 * @canUse LivePlayerContext
 * @__class
 * [exitFullScreen, exitPictureInPicture, mute, pause, play, requestFullScreen, requestPictureInPicture, resume,\
 * snapshot, stop]
 */
class LivePlayerContext {
    constructor(LivePlayer) {
        this.LivePlayer = LivePlayer;
    }
    exitCasting(_option) {
        throw new Error('Method not implemented.');
    }
    exitFullScreen(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer.toggleFullScreen(false);
        if (result.errMsg === 'exitFullScreen:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    exitPictureInPicture(_option) {
        this.LivePlayer._exitPictureInPicture()
            .then((result) => {
            var _a;
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        })
            .catch((err) => {
            var _a;
            (_a = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _a === void 0 ? void 0 : _a.call(_option, err);
        })
            .finally(() => {
            var _a;
            (_a = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _a === void 0 ? void 0 : _a.call(_option, { errMsg: `ok` });
        });
    }
    mute(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer._mute();
        if (result.errMsg === 'mute:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    pause(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer._pause();
        if (result.errMsg === 'pause:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    play(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer._play();
        if (result.errMsg === 'play:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    reconnectCasting(_option) {
        throw new Error('Method not implemented.');
    }
    requestFullScreen(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer.toggleFullScreen(true);
        if (result.errMsg === 'requestFullScreen:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    requestPictureInPicture(_option) {
        this.LivePlayer._enterPictureInPicture()
            .then((result) => {
            var _a;
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        })
            .catch((err) => {
            var _a;
            (_a = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _a === void 0 ? void 0 : _a.call(_option, err);
        })
            .finally(() => {
            var _a;
            (_a = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _a === void 0 ? void 0 : _a.call(_option, { errMsg: `ok` });
        });
    }
    resume(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer._resume();
        if (result.errMsg === 'resume:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    snapshot(_option) {
        this.LivePlayer._snapshot(_option)
            .then((result) => {
            var _a, _b;
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        })
            .catch((err) => {
            var _a, _b;
            (_a = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _a === void 0 ? void 0 : _a.call(_option, err);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, err);
        });
    }
    startCasting(_option) {
        throw new Error('Method not implemented.');
    }
    stop(_option) {
        var _a, _b, _c;
        const result = this.LivePlayer._stop();
        if (result.errMsg === 'stop:ok') {
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, result);
        }
        else {
            (_b = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _b === void 0 ? void 0 : _b.call(_option, result);
        }
        (_c = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _c === void 0 ? void 0 : _c.call(_option, result);
    }
    switchCasting(_option) {
        throw new Error('Method not implemented.');
    }
}

export { LivePlayerContext };
//# sourceMappingURL=LivePlayerContext.js.map
