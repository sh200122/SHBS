import { __awaiter } from '../../../../node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.js';
import { showActionSheet } from '@tarojs/taro-h5';
import native from '../../NativeApi.js';
import { shouldBeObject } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';

/**
 * 拍摄视频或从手机相册中选视频
 *
 * @canUse chooseVideo
 * @__object [camera[back, front], compressed, maxDuration, sourceType[album, camera]]
 * @__success [tempFilePath, duration, size, height, width]
 */
const chooseVideo = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const name = 'chooseVideo';
    // options must be an Object
    const isValid = shouldBeObject(options).flag || typeof options === 'undefined';
    if (!isValid) {
        const res = { errMsg: `${name}:fail invalid params` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { compressed = true, sourceType = ['album', 'camera'], maxDuration = 60, camera = 'back', success, fail, } = options;
    const mediaType = ['video'];
    const handle = new MethodHandler({ name, success, fail });
    const sizeType = compressed ? ['compressed'] : ['original'];
    // @ts-ignore
    let sourceSelected;
    if (sourceType.length === 1) {
        sourceSelected = sourceType[0];
    }
    else if (typeof sourceType !== 'object' || (sourceType.includes('album') && sourceType.includes('camera'))) {
        const selected = yield showActionSheet({ itemList: ['拍摄', '从相册选择'] }).then((res) => {
            sourceSelected = res.tapIndex === 0 ? 'camera' : 'album';
            return true;
        }, () => {
            return false;
        });
        if (!selected) {
            return handle.fail({ errMsg: 'fail cancel' });
        }
    }
    return new Promise((resolve, reject) => {
        // @ts-ignore
        native.chooseMediumAssets({
            count: 1,
            sizeType: sizeType,
            mediaType: mediaType,
            sourceType: sourceSelected,
            maxDuration: maxDuration,
            camera: camera,
            apiName: name,
            success: (res) => {
                const result = {
                    duration: res.tempFiles[0].duration,
                    height: res.tempFiles[0].height,
                    size: res.tempFiles[0].size,
                    tempFilePath: res.tempFiles[0].tempFilePath,
                    width: res.tempFiles[0].width,
                    errMsg: res.errMsg,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail(err, { resolve, reject });
            },
        });
    });
});

export { chooseVideo };
//# sourceMappingURL=chooseVideo.js.map
