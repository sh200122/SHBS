{"version":3,"file":"MapContext.js","sources":["../../../../../src/api/apis/media/map/MapContext.ts"],"sourcesContent":["import Taro from '@tarojs/taro'\n\n/**\n * MapContext 实例\n *\n * @canUse MapContext\n * @__class\n * [getCenterLocation, setLocMarkerIcon, translateMarker, moveAlong, includePoints, getRegion, getRotate, getSkew, getScale, setCenterOffset,\\\n * addGroundOverlay, setBoundary, updateGroundOverlay, removeGroundOverlay, addMarkers, removeMarkers]\n */\n\nexport class MapContext implements Taro.MapContext {\n  Map: any\n\n  constructor (Map) {\n    this.Map = Map\n  }\n\n  getCenterLocation (\n    _option?: Taro.MapContext.GetCenterLocationOption | undefined\n  ): Promise<Taro.MapContext.GetCenterLocationSuccessCallbackResult> {\n    try {\n      const centerLocation = this.Map._getCenterLocation(_option) // 调用地图组件的方法获取中心位置\n      const successResult: Taro.MapContext.GetCenterLocationSuccessCallbackResult = {\n        latitude: centerLocation[1],\n        longitude: centerLocation[0],\n        errMsg: 'getCenterLocation:ok',\n      }\n\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'getCenterLocation:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `getCenterLocation:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'getCenterLocation:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  setLocMarkerIcon (_option?: Taro.MapContext.SetLocMarkerIconOption | undefined): Promise<TaroGeneral.CallbackResult> {\n    try {\n      this.Map._setLocMarkerIcon(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'setLocMarkerIcon:ok',\n      }\n      _option?.success?.({ errMsg: 'setLocMarkerIcon:ok' })\n      _option?.complete?.({ errMsg: 'setLocMarkerIcon:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `setLocMarkerIcon:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'setLocMarkerIcon:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  moveToLocation (_option: Taro.MapContext.MoveToLocationOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `moveToLocation接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  translateMarker (_option: Taro.MapContext.TranslateMarkerOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const flagObj = this.Map._translateMarker(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'translateMarker:ok',\n      }\n      if (flagObj) {\n        if (flagObj.flagId && flagObj.flagCoordinate) {\n          _option?.success?.({ errMsg: 'translateMarker:ok' })\n          _option?.complete?.({ errMsg: 'translateMarker:ok' })\n        } else if (!flagObj.flagId) {\n          const errorResult: TaroGeneral.CallbackResult = {\n            errMsg: `translateMarker:fail,makerId${_option.markerId}未找到`,\n          }\n          _option?.fail?.(errorResult)\n          _option?.complete?.(errorResult)\n        } else if (flagObj.flagId && !flagObj.flagCoordinate) {\n          const errorResult: TaroGeneral.CallbackResult = { errMsg: `translateMarker:fail,请设置坐标点经纬度有效值` }\n          _option?.fail?.(errorResult)\n          _option?.complete?.(errorResult)\n        }\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = {\n          errMsg: `translateMarker:fail,makerId${_option.markerId}未找到`,\n        }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `translateMarker:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'translateMarker:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  moveAlong (_object: any) {\n    try {\n      const flagObj = this.Map._moveAlong(_object)\n      const successResult: any = {\n        errMsg: 'moveAlong:ok',\n      }\n\n      if (flagObj) {\n        if (flagObj.flagId && flagObj.flagCoordinate) {\n          _object?.success?.({ errMsg: 'moveAlong:ok' })\n          _object?.complete?.({ errMsg: 'moveAlong:ok' })\n        } else if (!flagObj.flagId) {\n          const errorResult: any = { errMsg: `moveAlong:fail,makerId${_object.markerId}未找到` }\n          _object?.fail?.(errorResult)\n          _object?.complete?.(errorResult)\n        } else if (flagObj.flagId && !flagObj.flagCoordinate) {\n          const errorResult: TaroGeneral.CallbackResult = { errMsg: `moveAlong:fail,请设置坐标点经纬度有效值` }\n          _object?.fail?.(errorResult)\n          _object?.complete?.(errorResult)\n        }\n      } else {\n        const errorResult: any = { errMsg: `moveAlong:fail,makerId${_object.markerId}未找到` }\n        _object?.fail?.(errorResult)\n        _object?.complete?.(errorResult)\n      }\n\n      return successResult\n    } catch (e) {\n      const errorResult: any = { errMsg: `moveAlong:${e}` }\n      _object?.fail?.(errorResult)\n      _object?.complete?.({ errMsg: 'moveAlong:ok' })\n      return errorResult\n    }\n  }\n\n  includePoints (_option: Taro.MapContext.IncludePointsOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const flag = this.Map._includePoints(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'includePoints:ok',\n      }\n      if (flag) {\n        _option?.success?.({ errMsg: 'includePoints:ok' })\n        _option?.complete?.({ errMsg: 'includePoints:ok' })\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = {\n          errMsg: `includePoints:fail,可视范围的坐标点超出最小缩放级别`,\n        }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `includePoints:${e},可视范围的坐标点超出最小缩放级别` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'includePoints:ok' })\n      return Promise.reject(errorResult)\n    }\n  }\n\n  getRegion (\n    _option?: Taro.MapContext.GetRegionOption | undefined\n  ): Promise<Taro.MapContext.GetRegionSuccessCallbackResult> {\n    try {\n      const Region = this.Map._getRegion()\n      const successResult: Taro.MapContext.GetRegionSuccessCallbackResult = {\n        northeast: { latitude: Region.northeast.lat, longitude: Region.northeast.lng },\n        southwest: { latitude: Region.southwest.lat, longitude: Region.southwest.lng },\n        errMsg: 'getRegion:ok',\n      }\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'getRegion:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `getRegion:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'getRegion:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  getRotate (\n    _option?: Taro.MapContext.GetRotateOption | undefined\n  ): Promise<Taro.MapContext.GetRotateSuccessCallbackResult> {\n    try {\n      const Rotate = this.Map._getRotate()\n      const successResult: Taro.MapContext.GetRotateSuccessCallbackResult = {\n        rotate: Rotate,\n        errMsg: 'getRotate:ok',\n      }\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'getRotate:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `getRotate:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'getRotate:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  getSkew (_option?: Taro.MapContext.GetSkewOption | undefined): Promise<Taro.MapContext.GetSkewSuccessCallbackResult> {\n    try {\n      const Skew = this.Map._getSkew()\n      const successResult: Taro.MapContext.GetSkewSuccessCallbackResult = {\n        skew: Skew,\n        errMsg: 'getSkew:ok',\n      }\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'getSkew:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `getSkew:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'getSkew:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  getScale (\n    _option?: Taro.MapContext.GetScaleOption | undefined\n  ): Promise<Taro.MapContext.GetScaleSuccessCallbackResult> {\n    try {\n      const Scale = this.Map._getScale()\n      const successResult: Taro.MapContext.GetScaleSuccessCallbackResult = {\n        scale: Scale,\n        errMsg: 'getScale:ok',\n      }\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'getScale:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `getScale:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'getScale:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  setCenterOffset (_option: Taro.MapContext.SetCenterOffsetOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      this.Map._setCenterOffset(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'setCenterOffset:ok',\n      }\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'setCenterOffset:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `setCenterOffset:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'setCenterOffset:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  removeCustomLayer (_option: Taro.MapContext.RemoveCustomLayerOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `removeCustomLayer接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  addCustomLayer (_option: Taro.MapContext.AddCustomLayerOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `addCustomLayer接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  addGroundOverlay (_option: Taro.MapContext.AddGroundLayerOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const flag = this.Map._addGroundOverlay(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'addGroundOverlay:ok',\n      }\n      if (flag) {\n        _option?.success?.(successResult)\n        _option?.complete?.({ errMsg: 'addGroundOverlay:ok' })\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = { errMsg: `addGroundOverlay:fail,请设置经纬度有效值` }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `addGroundOverlay:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'addGroundOverlay:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  addVisualLayer (_option: Taro.MapContext.AddVisualLayerOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `addVisualLayer接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  removeVisualLayer (_option: Taro.MapContext.RemoveVisualLayerOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `removeVisualLayer接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  addArc (_option: Taro.MapContext.AddArcOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `addArc接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  removeArc (_option: Taro.MapContext.RemoveArcOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `removeArc接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  setBoundary (_option: Taro.MapContext.SetBoundaryOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const flag = this.Map._setBoundary(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'setBoundary:ok',\n      }\n      if (flag) {\n        _option?.success?.({ errMsg: 'setBoundary:ok' })\n        _option?.complete?.({ errMsg: 'setBoundary:ok' })\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = { errMsg: `setBoundary:fail,请设置经纬度有效值` }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `setBoundary:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'setBoundary:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  updateGroundOverlay (_option: Taro.MapContext.UpdateGroundOverlayOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const flagObj = this.Map._updateGroundOverlay(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'updateGroundOverlay:ok',\n      }\n      if (flagObj) {\n        if (flagObj.flagId && flagObj.flagCoordinate) {\n          _option?.success?.(successResult)\n          _option?.complete?.({ errMsg: 'updateGroundOverlay:ok' })\n        } else if (!flagObj.flagId) {\n          const errorResult: TaroGeneral.CallbackResult = {\n            errMsg: `updateGroundOverlay:fail,未找到id为${_option.id}的自定义图片图层`,\n          }\n          _option?.fail?.(errorResult)\n          _option?.complete?.(errorResult)\n        } else if (flagObj.flagId && !flagObj.flagCoordinate) {\n          const errorResult: TaroGeneral.CallbackResult = { errMsg: `updateGroundOverlay:fail,请设置经纬度有效值` }\n          _option?.fail?.(errorResult)\n          _option?.complete?.(errorResult)\n        }\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = {\n          errMsg: `updateGroundOverlay:fail,未找到id为${_option.id}的自定义图片图层`,\n        }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `updateGroundOverlay:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'updateGroundOverlay:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  removeGroundOverlay (_option: Taro.MapContext.RemoveGroundOverlayOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const newTargetOverlay = this.Map._removeGroundOverlay(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'removeGroundOverlay:ok',\n      }\n      if (newTargetOverlay) {\n        _option?.success?.(successResult)\n        _option?.complete?.({ errMsg: 'removeGroundOverlay:ok' })\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = {\n          errMsg: `removeGroundOverlay:fail,未找到id为${_option.id}的自定义图片图层`,\n        }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `removeGroundOverlay:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'removeGroundOverlay:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  toScreenLocation (_option: Taro.MapContext.ToScreenLocationOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `toScreenLocation接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  fromScreenLocation (_option: Taro.MapContext.FromScreenLocationOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `fromScreenLocation接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  openMapApp (_option: Taro.MapContext.OpenMapAppOption): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `openMapApp接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  addMarkers (_option: Taro.MapContext.AddMarkersOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      this.Map._addMarkers(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'addMarkers:ok',\n      }\n      _option?.success?.(successResult)\n      _option?.complete?.({ errMsg: 'addMarkers:ok' })\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `addMarkers:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'addMarkers:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  removeMarkers (_option: Taro.MapContext.RemoveMarkersOption): Promise<TaroGeneral.CallbackResult> {\n    try {\n      const TargetMarker = this.Map._removeMarkers(_option)\n      const successResult: TaroGeneral.CallbackResult = {\n        errMsg: 'removeMarkers:ok',\n      }\n      if (TargetMarker) {\n        _option?.success?.(successResult)\n        _option?.complete?.({ errMsg: 'removeMarkers:ok' })\n      } else {\n        const errorResult: TaroGeneral.CallbackResult = { errMsg: `removeMarkers:fail,未找到该id的marker` }\n        _option?.fail?.(errorResult)\n        _option?.complete?.(errorResult)\n      }\n\n      return Promise.resolve(successResult)\n    } catch (e) {\n      const errorResult: TaroGeneral.CallbackResult = { errMsg: `removeMarkers:${e}` }\n      _option?.fail?.(errorResult)\n      _option?.complete?.({ errMsg: 'removeMarkers:ok' })\n\n      return Promise.reject(errorResult)\n    }\n  }\n\n  initMarkerCluster (\n    _option?: Taro.MapContext.InitMarkerClusterOption | undefined\n  ): Promise<TaroGeneral.CallbackResult> {\n    const errorResult: TaroGeneral.CallbackResult = { errMsg: `initMarkerCluster接口未支持` }\n    return Promise.reject(errorResult)\n  }\n\n  on (\n    _event: keyof Taro.MapContext.MapEvent,\n    _callback: (res: Taro.MapContext.MapEventMarkerClusterCreate | Taro.MapContext.MapEventMarkerClusterClick) => void\n  ): void {\n    console.error('on接口未支持')\n  }\n}\n"],"names":[],"mappings":"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"}