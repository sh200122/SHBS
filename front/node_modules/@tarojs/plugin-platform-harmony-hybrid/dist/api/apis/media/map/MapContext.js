/**
 * MapContext 实例
 *
 * @canUse MapContext
 * @__class
 * [getCenterLocation, setLocMarkerIcon, translateMarker, moveAlong, includePoints, getRegion, getRotate, getSkew, getScale, setCenterOffset,\
 * addGroundOverlay, setBoundary, updateGroundOverlay, removeGroundOverlay, addMarkers, removeMarkers]
 */
class MapContext {
    constructor(Map) {
        this.Map = Map;
    }
    getCenterLocation(_option) {
        var _a, _b, _c, _d;
        try {
            const centerLocation = this.Map._getCenterLocation(_option); // 调用地图组件的方法获取中心位置
            const successResult = {
                latitude: centerLocation[1],
                longitude: centerLocation[0],
                errMsg: 'getCenterLocation:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'getCenterLocation:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `getCenterLocation:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'getCenterLocation:ok' });
            return Promise.reject(errorResult);
        }
    }
    setLocMarkerIcon(_option) {
        var _a, _b, _c, _d;
        try {
            this.Map._setLocMarkerIcon(_option);
            const successResult = {
                errMsg: 'setLocMarkerIcon:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, { errMsg: 'setLocMarkerIcon:ok' });
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'setLocMarkerIcon:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `setLocMarkerIcon:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'setLocMarkerIcon:ok' });
            return Promise.reject(errorResult);
        }
    }
    moveToLocation(_option) {
        const errorResult = { errMsg: `moveToLocation接口未支持` };
        return Promise.reject(errorResult);
    }
    translateMarker(_option) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        try {
            const flagObj = this.Map._translateMarker(_option);
            const successResult = {
                errMsg: 'translateMarker:ok',
            };
            if (flagObj) {
                if (flagObj.flagId && flagObj.flagCoordinate) {
                    (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, { errMsg: 'translateMarker:ok' });
                    (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'translateMarker:ok' });
                }
                else if (!flagObj.flagId) {
                    const errorResult = {
                        errMsg: `translateMarker:fail,makerId${_option.markerId}未找到`,
                    };
                    (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                    (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
                }
                else if (flagObj.flagId && !flagObj.flagCoordinate) {
                    const errorResult = { errMsg: `translateMarker:fail,请设置坐标点经纬度有效值` };
                    (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
                    (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, errorResult);
                }
            }
            else {
                const errorResult = {
                    errMsg: `translateMarker:fail,makerId${_option.markerId}未找到`,
                };
                (_g = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _g === void 0 ? void 0 : _g.call(_option, errorResult);
                (_h = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _h === void 0 ? void 0 : _h.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `translateMarker:${e}` };
            (_j = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _j === void 0 ? void 0 : _j.call(_option, errorResult);
            (_k = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _k === void 0 ? void 0 : _k.call(_option, { errMsg: 'translateMarker:ok' });
            return Promise.reject(errorResult);
        }
    }
    moveAlong(_object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        try {
            const flagObj = this.Map._moveAlong(_object);
            const successResult = {
                errMsg: 'moveAlong:ok',
            };
            if (flagObj) {
                if (flagObj.flagId && flagObj.flagCoordinate) {
                    (_a = _object === null || _object === void 0 ? void 0 : _object.success) === null || _a === void 0 ? void 0 : _a.call(_object, { errMsg: 'moveAlong:ok' });
                    (_b = _object === null || _object === void 0 ? void 0 : _object.complete) === null || _b === void 0 ? void 0 : _b.call(_object, { errMsg: 'moveAlong:ok' });
                }
                else if (!flagObj.flagId) {
                    const errorResult = { errMsg: `moveAlong:fail,makerId${_object.markerId}未找到` };
                    (_c = _object === null || _object === void 0 ? void 0 : _object.fail) === null || _c === void 0 ? void 0 : _c.call(_object, errorResult);
                    (_d = _object === null || _object === void 0 ? void 0 : _object.complete) === null || _d === void 0 ? void 0 : _d.call(_object, errorResult);
                }
                else if (flagObj.flagId && !flagObj.flagCoordinate) {
                    const errorResult = { errMsg: `moveAlong:fail,请设置坐标点经纬度有效值` };
                    (_e = _object === null || _object === void 0 ? void 0 : _object.fail) === null || _e === void 0 ? void 0 : _e.call(_object, errorResult);
                    (_f = _object === null || _object === void 0 ? void 0 : _object.complete) === null || _f === void 0 ? void 0 : _f.call(_object, errorResult);
                }
            }
            else {
                const errorResult = { errMsg: `moveAlong:fail,makerId${_object.markerId}未找到` };
                (_g = _object === null || _object === void 0 ? void 0 : _object.fail) === null || _g === void 0 ? void 0 : _g.call(_object, errorResult);
                (_h = _object === null || _object === void 0 ? void 0 : _object.complete) === null || _h === void 0 ? void 0 : _h.call(_object, errorResult);
            }
            return successResult;
        }
        catch (e) {
            const errorResult = { errMsg: `moveAlong:${e}` };
            (_j = _object === null || _object === void 0 ? void 0 : _object.fail) === null || _j === void 0 ? void 0 : _j.call(_object, errorResult);
            (_k = _object === null || _object === void 0 ? void 0 : _object.complete) === null || _k === void 0 ? void 0 : _k.call(_object, { errMsg: 'moveAlong:ok' });
            return errorResult;
        }
    }
    includePoints(_option) {
        var _a, _b, _c, _d, _e, _f;
        try {
            const flag = this.Map._includePoints(_option);
            const successResult = {
                errMsg: 'includePoints:ok',
            };
            if (flag) {
                (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, { errMsg: 'includePoints:ok' });
                (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'includePoints:ok' });
            }
            else {
                const errorResult = {
                    errMsg: `includePoints:fail,可视范围的坐标点超出最小缩放级别`,
                };
                (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `includePoints:${e},可视范围的坐标点超出最小缩放级别` };
            (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
            (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, { errMsg: 'includePoints:ok' });
            return Promise.reject(errorResult);
        }
    }
    getRegion(_option) {
        var _a, _b, _c, _d;
        try {
            const Region = this.Map._getRegion();
            const successResult = {
                northeast: { latitude: Region.northeast.lat, longitude: Region.northeast.lng },
                southwest: { latitude: Region.southwest.lat, longitude: Region.southwest.lng },
                errMsg: 'getRegion:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'getRegion:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `getRegion:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'getRegion:ok' });
            return Promise.reject(errorResult);
        }
    }
    getRotate(_option) {
        var _a, _b, _c, _d;
        try {
            const Rotate = this.Map._getRotate();
            const successResult = {
                rotate: Rotate,
                errMsg: 'getRotate:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'getRotate:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `getRotate:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'getRotate:ok' });
            return Promise.reject(errorResult);
        }
    }
    getSkew(_option) {
        var _a, _b, _c, _d;
        try {
            const Skew = this.Map._getSkew();
            const successResult = {
                skew: Skew,
                errMsg: 'getSkew:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'getSkew:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `getSkew:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'getSkew:ok' });
            return Promise.reject(errorResult);
        }
    }
    getScale(_option) {
        var _a, _b, _c, _d;
        try {
            const Scale = this.Map._getScale();
            const successResult = {
                scale: Scale,
                errMsg: 'getScale:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'getScale:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `getScale:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'getScale:ok' });
            return Promise.reject(errorResult);
        }
    }
    setCenterOffset(_option) {
        var _a, _b, _c, _d;
        try {
            this.Map._setCenterOffset(_option);
            const successResult = {
                errMsg: 'setCenterOffset:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'setCenterOffset:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `setCenterOffset:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'setCenterOffset:ok' });
            return Promise.reject(errorResult);
        }
    }
    removeCustomLayer(_option) {
        const errorResult = { errMsg: `removeCustomLayer接口未支持` };
        return Promise.reject(errorResult);
    }
    addCustomLayer(_option) {
        const errorResult = { errMsg: `addCustomLayer接口未支持` };
        return Promise.reject(errorResult);
    }
    addGroundOverlay(_option) {
        var _a, _b, _c, _d, _e, _f;
        try {
            const flag = this.Map._addGroundOverlay(_option);
            const successResult = {
                errMsg: 'addGroundOverlay:ok',
            };
            if (flag) {
                (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
                (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'addGroundOverlay:ok' });
            }
            else {
                const errorResult = { errMsg: `addGroundOverlay:fail,请设置经纬度有效值` };
                (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `addGroundOverlay:${e}` };
            (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
            (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, { errMsg: 'addGroundOverlay:ok' });
            return Promise.reject(errorResult);
        }
    }
    addVisualLayer(_option) {
        const errorResult = { errMsg: `addVisualLayer接口未支持` };
        return Promise.reject(errorResult);
    }
    removeVisualLayer(_option) {
        const errorResult = { errMsg: `removeVisualLayer接口未支持` };
        return Promise.reject(errorResult);
    }
    addArc(_option) {
        const errorResult = { errMsg: `addArc接口未支持` };
        return Promise.reject(errorResult);
    }
    removeArc(_option) {
        const errorResult = { errMsg: `removeArc接口未支持` };
        return Promise.reject(errorResult);
    }
    setBoundary(_option) {
        var _a, _b, _c, _d, _e, _f;
        try {
            const flag = this.Map._setBoundary(_option);
            const successResult = {
                errMsg: 'setBoundary:ok',
            };
            if (flag) {
                (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, { errMsg: 'setBoundary:ok' });
                (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'setBoundary:ok' });
            }
            else {
                const errorResult = { errMsg: `setBoundary:fail,请设置经纬度有效值` };
                (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `setBoundary:${e}` };
            (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
            (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, { errMsg: 'setBoundary:ok' });
            return Promise.reject(errorResult);
        }
    }
    updateGroundOverlay(_option) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        try {
            const flagObj = this.Map._updateGroundOverlay(_option);
            const successResult = {
                errMsg: 'updateGroundOverlay:ok',
            };
            if (flagObj) {
                if (flagObj.flagId && flagObj.flagCoordinate) {
                    (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
                    (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'updateGroundOverlay:ok' });
                }
                else if (!flagObj.flagId) {
                    const errorResult = {
                        errMsg: `updateGroundOverlay:fail,未找到id为${_option.id}的自定义图片图层`,
                    };
                    (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                    (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
                }
                else if (flagObj.flagId && !flagObj.flagCoordinate) {
                    const errorResult = { errMsg: `updateGroundOverlay:fail,请设置经纬度有效值` };
                    (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
                    (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, errorResult);
                }
            }
            else {
                const errorResult = {
                    errMsg: `updateGroundOverlay:fail,未找到id为${_option.id}的自定义图片图层`,
                };
                (_g = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _g === void 0 ? void 0 : _g.call(_option, errorResult);
                (_h = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _h === void 0 ? void 0 : _h.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `updateGroundOverlay:${e}` };
            (_j = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _j === void 0 ? void 0 : _j.call(_option, errorResult);
            (_k = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _k === void 0 ? void 0 : _k.call(_option, { errMsg: 'updateGroundOverlay:ok' });
            return Promise.reject(errorResult);
        }
    }
    removeGroundOverlay(_option) {
        var _a, _b, _c, _d, _e, _f;
        try {
            const newTargetOverlay = this.Map._removeGroundOverlay(_option);
            const successResult = {
                errMsg: 'removeGroundOverlay:ok',
            };
            if (newTargetOverlay) {
                (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
                (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'removeGroundOverlay:ok' });
            }
            else {
                const errorResult = {
                    errMsg: `removeGroundOverlay:fail,未找到id为${_option.id}的自定义图片图层`,
                };
                (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `removeGroundOverlay:${e}` };
            (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
            (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, { errMsg: 'removeGroundOverlay:ok' });
            return Promise.reject(errorResult);
        }
    }
    toScreenLocation(_option) {
        const errorResult = { errMsg: `toScreenLocation接口未支持` };
        return Promise.reject(errorResult);
    }
    fromScreenLocation(_option) {
        const errorResult = { errMsg: `fromScreenLocation接口未支持` };
        return Promise.reject(errorResult);
    }
    openMapApp(_option) {
        const errorResult = { errMsg: `openMapApp接口未支持` };
        return Promise.reject(errorResult);
    }
    addMarkers(_option) {
        var _a, _b, _c, _d;
        try {
            this.Map._addMarkers(_option);
            const successResult = {
                errMsg: 'addMarkers:ok',
            };
            (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
            (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'addMarkers:ok' });
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `addMarkers:${e}` };
            (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
            (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, { errMsg: 'addMarkers:ok' });
            return Promise.reject(errorResult);
        }
    }
    removeMarkers(_option) {
        var _a, _b, _c, _d, _e, _f;
        try {
            const TargetMarker = this.Map._removeMarkers(_option);
            const successResult = {
                errMsg: 'removeMarkers:ok',
            };
            if (TargetMarker) {
                (_a = _option === null || _option === void 0 ? void 0 : _option.success) === null || _a === void 0 ? void 0 : _a.call(_option, successResult);
                (_b = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _b === void 0 ? void 0 : _b.call(_option, { errMsg: 'removeMarkers:ok' });
            }
            else {
                const errorResult = { errMsg: `removeMarkers:fail,未找到该id的marker` };
                (_c = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _c === void 0 ? void 0 : _c.call(_option, errorResult);
                (_d = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _d === void 0 ? void 0 : _d.call(_option, errorResult);
            }
            return Promise.resolve(successResult);
        }
        catch (e) {
            const errorResult = { errMsg: `removeMarkers:${e}` };
            (_e = _option === null || _option === void 0 ? void 0 : _option.fail) === null || _e === void 0 ? void 0 : _e.call(_option, errorResult);
            (_f = _option === null || _option === void 0 ? void 0 : _option.complete) === null || _f === void 0 ? void 0 : _f.call(_option, { errMsg: 'removeMarkers:ok' });
            return Promise.reject(errorResult);
        }
    }
    initMarkerCluster(_option) {
        const errorResult = { errMsg: `initMarkerCluster接口未支持` };
        return Promise.reject(errorResult);
    }
    on(_event, _callback) {
        console.error('on接口未支持');
    }
}

export { MapContext };
//# sourceMappingURL=MapContext.js.map
