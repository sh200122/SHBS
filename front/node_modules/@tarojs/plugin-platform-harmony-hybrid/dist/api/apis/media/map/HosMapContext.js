import { temporarilyNotSupport, shouldBeObject } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';

class HosMapContext {
    constructor(mapId) {
        this.setLocMarkerIcon = temporarilyNotSupport('setLocMarkerIcon');
        this.translateMarker = temporarilyNotSupport('translateMarker');
        this.moveAlong = temporarilyNotSupport('moveAlong');
        this.includePoints = temporarilyNotSupport('includePoints');
        this.setCenterOffset = temporarilyNotSupport('setCenterOffset');
        this.removeCustomLayer = temporarilyNotSupport('removeCustomLayer');
        this.addCustomLayer = temporarilyNotSupport('addCustomLayer');
        this.addGroundOverlay = temporarilyNotSupport('addGroundOverlay');
        this.addVisualLayer = temporarilyNotSupport('addVisualLayer');
        this.removeVisualLayer = temporarilyNotSupport('removeVisualLayer');
        this.addArc = temporarilyNotSupport('addArc');
        this.removeArc = temporarilyNotSupport('removeArc');
        this.setBoundary = temporarilyNotSupport('setBoundary');
        this.updateGroundOverlay = temporarilyNotSupport('updateGroundOverlay');
        this.removeGroundOverlay = temporarilyNotSupport('removeGroundOverlay');
        this.toScreenLocation = temporarilyNotSupport('toScreenLocation');
        this.fromScreenLocation = temporarilyNotSupport('fromScreenLocation');
        this.openMapApp = temporarilyNotSupport('openMapApp');
        this.addMarkers = temporarilyNotSupport('addMarkers');
        this.removeMarkers = temporarilyNotSupport('removeMarkers');
        this.initMarkerCluster = temporarilyNotSupport('initMarkerCluster');
        this.on = temporarilyNotSupport('on');
        // @ts-ignore 若原生侧创建MapContext成功，则返回mapId字符串，否则返回undefined。
        this.nativeMapContextId = window.JSBridge && window.JSBridge.createMapContext(mapId);
    }
    getCenterLocation(option) {
        return new Promise((resolve, reject) => {
            const name = 'getCenterLocation';
            const isValid = shouldBeObject(option).flag || typeof option === 'undefined';
            if (!isValid) {
                const res = { errMsg: `${name}:fail invalid params` };
                return reject(res);
            }
            const { success, fail, complete } = option || {};
            const handle = new MethodHandler({ name, success, fail, complete });
            if (this.nativeMapContextId === 'undefined') {
                const res = { errMsg: `${name}:fail native map controller was not found` };
                reject(res);
            }
            else {
                // @ts-ignore
                const result = window.JSBridge && window.JSBridge.callMapContextFunction(null, { instanceId: this.nativeMapContextId, callType: 'get', funcName: 'getCenterLocation' });
                if (typeof result === 'string') {
                    handle.fail(JSON.parse(result), { resolve, reject });
                }
                else {
                    handle.success(result, { resolve, reject });
                }
            }
        });
    }
    moveToLocation(option) {
        return new Promise((resolve, reject) => {
            const name = 'moveToLocation';
            const isValid = shouldBeObject(option).flag;
            if (!isValid) {
                const res = { errMsg: `${name}:fail invalid params` };
                return reject(res);
            }
            const { success, fail, complete, latitude, longitude } = option;
            const handle = new MethodHandler({ name, success, fail, complete });
            if (this.nativeMapContextId === 'undefined') {
                const res = { errMsg: `${name}:fail native map controller was not found` };
                reject(res);
            }
            else {
                // @ts-ignore
                const result = window.JSBridge && window.JSBridge.callMapContextFunction({ latitude, longitude }, { instanceId: this.nativeMapContextId, callType: 'get', funcName: 'moveToLocation' });
                if (typeof result === 'string') {
                    handle.fail(JSON.parse(result), { resolve, reject });
                }
                else {
                    handle.success({ errMsg: `${name}:ok` }, { resolve, reject });
                }
            }
        });
    }
    getRegion(_option) {
        return Promise.reject(new Error('暂不支持此方法'));
    }
    getRotate(_option) {
        return Promise.reject(new Error('暂不支持此方法'));
    }
    getSkew(_option) {
        return Promise.reject(new Error('暂不支持此方法'));
    }
    getScale(_option) {
        return Promise.reject(new Error('暂不支持此方法'));
    }
}

export { HosMapContext };
//# sourceMappingURL=HosMapContext.js.map
