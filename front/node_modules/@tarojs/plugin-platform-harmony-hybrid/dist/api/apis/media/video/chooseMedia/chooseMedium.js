import { __awaiter } from '../../../../../node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.js';
import { showActionSheet } from '@tarojs/taro-h5';
import native from '../../../NativeApi.js';
import { shouldBeObject } from '../../../utils/index.js';
import { MethodHandler } from '../../../utils/handler.js';

/**
 * 拍摄或从手机相册中选择图片或视频
 *
 * @canUse chooseMedium
 * @__object [count, mediaType[video, image, mix], sourceType[album, camera], maxDuration, sizeType, camera[back, front],takingSupported,editSupported,searchSupported]
 * @__success [tempFiles, type]
 */
const chooseMedium = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const name = 'chooseMedium';
    // options must be an Object
    const isValid = shouldBeObject(options).flag || typeof options === 'undefined';
    if (!isValid) {
        const res = { errMsg: `${name}:fail invalid params` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { count = 9, mediaType = ['video', 'image'], sourceType = ['album', 'camera'], maxDuration = 10, sizeType = ['original', 'compressed'], camera = 'back', takingSupported = false, editSupported = false, searchSupported = false, success, fail, } = options;
    const handle = new MethodHandler({ name, success, fail });
    let sourceSelected;
    if (sourceType.length === 1) {
        sourceSelected = sourceType[0];
    }
    else if (typeof sourceType !== 'object' || (sourceType.includes('album') && sourceType.includes('camera'))) {
        const selected = yield showActionSheet({ itemList: ['拍摄', '从相册选择'] }).then((res) => {
            sourceSelected = res.tapIndex === 0 ? 'camera' : 'album';
            return true;
        }, () => {
            return false;
        });
        if (!selected) {
            return handle.fail({ errMsg: 'fail cancel' });
        }
    }
    return new Promise((resolve, reject) => {
        native.chooseMediumAssets({
            count: count,
            mediaType: mediaType,
            sourceType: sourceSelected,
            maxDuration: maxDuration,
            sizeType: sizeType,
            camera: camera,
            takingSupported: takingSupported,
            editSupported: editSupported,
            searchSupported: searchSupported,
            apiName: name,
            success: (res) => {
                const result = {
                    tempFiles: res.tempFiles,
                    type: res.type,
                    errMsg: res.errMsg,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail(err, { resolve, reject });
            },
        });
    });
});

export { chooseMedium };
//# sourceMappingURL=chooseMedium.js.map
