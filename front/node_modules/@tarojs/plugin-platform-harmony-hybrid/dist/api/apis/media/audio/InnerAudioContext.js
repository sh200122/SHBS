import Taro from '@tarojs/api';
import { permanentlyNotSupport } from '../../utils/index.js';
import { CallbackManager } from '../../utils/handler.js';

/**
 * InnerAudioContext 实例
 *
 * @canUse InnerAudioContext
 * @__class
 * [play, pause, stop, seek, destroy, onCanplay, onPlay, onPause, onStop, onEnded,\
 * onTimeUpdate, onError, onWaiting, onSeeking, onSeeked, offCanplay, offPlay, offPause, offStop, offEnded,\
 * offTimeUpdate, offError, offWaiting, offSeeking, offSeeked]
 */
class InnerAudioContext {
    constructor() {
        this.__startTime = 0;
        this.__isFirstPlay = true;
        this.MIN_PLAYBACKRATE = 0.5;
        this.MAX_PLAYBACKRATE = 2.0;
        this.play = () => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.play(); };
        this.pause = () => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.pause(); };
        this.stop = () => {
            this.pause();
            this.seek(0);
            this.stopStack.trigger();
        };
        this.seek = (position) => {
            if (this.Instance) {
                this.Instance.currentTime = position;
            }
        };
        /**
         * @TODO destroy得并不干净
         */
        this.destroy = () => {
            this.stop();
            if (this.Instance) {
                document.body.removeChild(this.Instance);
                this.Instance = undefined;
            }
        };
        this.canPlayCallback = () => { };
        this.playCallback = () => { };
        this.pauseCallback = () => { };
        this.stopCallback = () => { };
        this.endedCallback = () => { };
        this.timeUpdateCallback = () => { };
        this.waitingCallback = () => { };
        this.seekingCallback = () => { };
        this.seekedCallback = () => { };
        this.errorCallback = () => { };
        this.onCanplay = (callback = this.canPlayCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('canplay', callback); };
        this.onPlay = (callback = this.playCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('play', callback); };
        this.onPause = (callback = this.pauseCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('pause', callback); };
        this.onStop = (callback = this.stopCallback) => this.stopStack.add(callback);
        this.onEnded = (callback = this.endedCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('ended', callback); };
        this.onTimeUpdate = (callback = this.timeUpdateCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('timeupdate', callback); };
        this.onError = (callback = this.errorCallback) => this.errorStack.add(callback);
        this.onWaiting = (callback = this.waitingCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('waiting', callback); };
        this.onSeeking = (callback = this.seekingCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('seeking', callback); };
        this.onSeeked = (callback = this.seekedCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.addEventListener('seeked', callback); };
        this.offCanplay = (callback = this.canPlayCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('canplay', callback); };
        this.offPlay = (callback = this.playCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('play', callback); };
        this.offPause = (callback = this.pauseCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('pause', callback); };
        this.offStop = (callback = this.stopCallback) => this.stopStack.remove(callback);
        this.offEnded = (callback = this.endedCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('ended', callback); };
        this.offTimeUpdate = (callback = this.timeUpdateCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('timeupdate', callback); };
        this.offError = (callback = this.errorCallback) => this.errorStack.remove(callback);
        this.offWaiting = (callback = this.waitingCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('waiting', callback); };
        this.offSeeking = (callback = this.seekingCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('seeking', callback); };
        this.offSeeked = (callback = this.seekedCallback) => { var _a; return (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.removeEventListener('seeked', callback); };
        this.Instance = new Audio();
        this.errorStack = new CallbackManager();
        this.stopStack = new CallbackManager();
        Taro.eventCenter.on('__taroRouterChange', () => {
            this.stop();
        });
        this.onPlay(() => {
            if (this.__isFirstPlay) {
                this.__isFirstPlay = false;
                this.seek(this.startTime);
            }
        });
        document.body.appendChild(this.Instance);
    }
    set autoplay(e) {
        this.setProperty('autoplay', e);
    }
    get autoplay() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.autoplay) || false;
    }
    get buffered() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.buffered.length) || 0;
    }
    get currentTime() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.currentTime) || 0;
    }
    set currentTime(e) {
        this.seek(e);
    }
    get duration() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.duration) || 0;
    }
    set loop(e) {
        this.setProperty('loop', e);
    }
    get loop() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.loop) || false;
    }
    get paused() {
        var _a, _b;
        return (_b = (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.paused) !== null && _b !== void 0 ? _b : true;
    }
    set src(e) {
        this.setProperty('src', e);
    }
    get src() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.src) || '';
    }
    set volume(e) {
        this.setProperty('volume', e);
    }
    get volume() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.volume) || 1;
    }
    set playbackRate(e) {
        if (e < this.MIN_PLAYBACKRATE) {
            e = this.MIN_PLAYBACKRATE;
        }
        if (e > this.MAX_PLAYBACKRATE) {
            e = this.MAX_PLAYBACKRATE;
        }
        this.setProperty('playbackRate', e);
    }
    get playbackRate() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.playbackRate) || 1;
    }
    set obeyMuteSwitch(_e) {
        permanentlyNotSupport('InnerAudioContext.obeyMuteSwitch')();
    }
    get obeyMuteSwitch() {
        return true;
    }
    set startTime(e) {
        this.__startTime = e;
    }
    get startTime() {
        return this.__startTime || 0;
    }
    set referrerPolicy(e) {
        var _a;
        (_a = this.Instance) === null || _a === void 0 ? void 0 : _a.setAttribute('referrerpolicy', e);
    }
    get referrerPolicy() {
        var _a;
        return ((_a = this.Instance) === null || _a === void 0 ? void 0 : _a.getAttribute('referrerpolicy')) || 'origin';
    }
    setProperty(key, value) {
        if (this.Instance) {
            this.Instance[key] = value;
        }
    }
}

export { InnerAudioContext };
//# sourceMappingURL=InnerAudioContext.js.map
