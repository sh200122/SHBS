import { shouldBeObject, getParameterError } from '../../utils/index.js';
import { MethodHandler } from '../../utils/handler.js';
import native from '../../NativeApi.js';

/**
 * 压缩视频接口
 *
 * @canNotUse compressVideo
 * @null_implementation
 */
const compressVideo = (options) => {
    const name = 'compressVideo';
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `${name}:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { src, quality = ['low', 'medium', 'high'], bitrate, fps, resolution, success, fail, complete, } = options;
    const handle = new MethodHandler({ name, success, fail, complete });
    // options.url must be String
    if (typeof src !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'src',
                correct: 'string',
                wrong: src,
            }),
        });
    }
    if (typeof quality !== 'string') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'quality',
                correct: 'string',
                wrong: quality,
            }),
        });
    }
    if (typeof bitrate !== 'number') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'bitrate',
                correct: 'number',
                wrong: bitrate,
            }),
        });
    }
    if (typeof fps !== 'number') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'fps',
                correct: 'number',
                wrong: fps,
            }),
        });
    }
    if (typeof resolution !== 'number') {
        return handle.fail({
            errMsg: getParameterError({
                para: 'resolution',
                correct: 'number',
                wrong: resolution,
            }),
        });
    }
    return new Promise((resolve, reject) => {
        // @ts-ignore
        native.compressVideo({
            src: src,
            quality: quality,
            bitrate: bitrate,
            fps: fps,
            resolution: resolution,
            success: (res) => {
                const result = {
                    tempFilePath: res.tempFilePath,
                    size: res.size,
                    errMsg: res.errMsg,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                return handle.fail(err);
                handle.fail(err, { resolve, reject });
            },
        });
    });
};

export { compressVideo };
//# sourceMappingURL=compressVideo.js.map
