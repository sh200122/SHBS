import Taro from '@tarojs/taro';
/**
 * MapContext 实例
 *
 * @canUse MapContext
 * @__class
 * [getCenterLocation, setLocMarkerIcon, translateMarker, moveAlong, includePoints, getRegion, getRotate, getSkew, getScale, setCenterOffset,\
 * addGroundOverlay, setBoundary, updateGroundOverlay, removeGroundOverlay, addMarkers, removeMarkers]
 */
declare class MapContext implements Taro.MapContext {
    Map: any;
    constructor(Map: any);
    getCenterLocation(_option?: Taro.MapContext.GetCenterLocationOption | undefined): Promise<Taro.MapContext.GetCenterLocationSuccessCallbackResult>;
    setLocMarkerIcon(_option?: Taro.MapContext.SetLocMarkerIconOption | undefined): Promise<TaroGeneral.CallbackResult>;
    moveToLocation(_option: Taro.MapContext.MoveToLocationOption): Promise<TaroGeneral.CallbackResult>;
    translateMarker(_option: Taro.MapContext.TranslateMarkerOption): Promise<TaroGeneral.CallbackResult>;
    moveAlong(_object: any): any;
    includePoints(_option: Taro.MapContext.IncludePointsOption): Promise<TaroGeneral.CallbackResult>;
    getRegion(_option?: Taro.MapContext.GetRegionOption | undefined): Promise<Taro.MapContext.GetRegionSuccessCallbackResult>;
    getRotate(_option?: Taro.MapContext.GetRotateOption | undefined): Promise<Taro.MapContext.GetRotateSuccessCallbackResult>;
    getSkew(_option?: Taro.MapContext.GetSkewOption | undefined): Promise<Taro.MapContext.GetSkewSuccessCallbackResult>;
    getScale(_option?: Taro.MapContext.GetScaleOption | undefined): Promise<Taro.MapContext.GetScaleSuccessCallbackResult>;
    setCenterOffset(_option: Taro.MapContext.SetCenterOffsetOption): Promise<TaroGeneral.CallbackResult>;
    removeCustomLayer(_option: Taro.MapContext.RemoveCustomLayerOption): Promise<TaroGeneral.CallbackResult>;
    addCustomLayer(_option: Taro.MapContext.AddCustomLayerOption): Promise<TaroGeneral.CallbackResult>;
    addGroundOverlay(_option: Taro.MapContext.AddGroundLayerOption): Promise<TaroGeneral.CallbackResult>;
    addVisualLayer(_option: Taro.MapContext.AddVisualLayerOption): Promise<TaroGeneral.CallbackResult>;
    removeVisualLayer(_option: Taro.MapContext.RemoveVisualLayerOption): Promise<TaroGeneral.CallbackResult>;
    addArc(_option: Taro.MapContext.AddArcOption): Promise<TaroGeneral.CallbackResult>;
    removeArc(_option: Taro.MapContext.RemoveArcOption): Promise<TaroGeneral.CallbackResult>;
    setBoundary(_option: Taro.MapContext.SetBoundaryOption): Promise<TaroGeneral.CallbackResult>;
    updateGroundOverlay(_option: Taro.MapContext.UpdateGroundOverlayOption): Promise<TaroGeneral.CallbackResult>;
    removeGroundOverlay(_option: Taro.MapContext.RemoveGroundOverlayOption): Promise<TaroGeneral.CallbackResult>;
    toScreenLocation(_option: Taro.MapContext.ToScreenLocationOption): Promise<TaroGeneral.CallbackResult>;
    fromScreenLocation(_option: Taro.MapContext.FromScreenLocationOption): Promise<TaroGeneral.CallbackResult>;
    openMapApp(_option: Taro.MapContext.OpenMapAppOption): Promise<TaroGeneral.CallbackResult>;
    addMarkers(_option: Taro.MapContext.AddMarkersOption): Promise<TaroGeneral.CallbackResult>;
    removeMarkers(_option: Taro.MapContext.RemoveMarkersOption): Promise<TaroGeneral.CallbackResult>;
    initMarkerCluster(_option?: Taro.MapContext.InitMarkerClusterOption | undefined): Promise<TaroGeneral.CallbackResult>;
    on(_event: keyof Taro.MapContext.MapEvent, _callback: (res: Taro.MapContext.MapEventMarkerClusterCreate | Taro.MapContext.MapEventMarkerClusterClick) => void): void;
}
export { MapContext };
