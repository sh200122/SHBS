import { __decorate } from '../../node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.js';
import { syncApiCache } from './harmony-native/ApiCache.js';
import { asyncAndNotRelease, syncAndRelease, asyncAndRelease, syncAndNotRelease } from './harmony-native/ApiDecorator.js';
import { storageCacheAndSyncProxy } from './harmony-native/StorageCacheAndSyncProxy.js';
import { SyncCacheProxyHandler } from './NativeApiSyncCacheProxy.js';

// export let judgeUseAxios = false
class NativeApi {
    // @ts-ignore
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    registerNativeListener(listener) {
    }
    getWindowInfo() { }
    // @ts-ignore
    getDeviceInfo() {
        return '';
    }
    getSystemInfoSync() { }
    getSystemSetting() { }
    getAppBaseInfo() { }
    getAppAuthorizeSetting() { }
    // @ts-ignore
    setNavigationBarColor(options) {
        return options;
    }
    getMenuButtonBoundingClientRect() { }
    // @ts-ignore
    request(options) {
        return options;
    }
    // @ts-ignore
    saveDataUrlToFile(options) {
        return options;
    }
    // @ts-ignore
    copyFileToSandboxCache(options) {
        return options;
    }
    // @ts-ignore
    startAccelerometer(options) {
        return options;
    }
    // @ts-ignore
    stopAccelerometer(options) {
        return options;
    }
    // @ts-ignore
    onAccelerometerChange(options) {
        return options;
    }
    // @ts-ignore
    offAccelerometerChange(options) {
        return options;
    }
    // @ts-ignore
    startCompass(options) {
        return options;
    }
    // @ts-ignore
    stopCompass(options) {
        return options;
    }
    // @ts-ignore
    onCompassChange(options) {
        return options;
    }
    // @ts-ignore
    offCompassChange(options) {
        return options;
    }
    // @ts-ignore
    startGyroscope(options) {
        return options;
    }
    // @ts-ignore
    stopGyroscope(options) {
        return options;
    }
    // @ts-ignore
    onGyroscopeChange(options) {
        return options;
    }
    // @ts-ignore
    saveImageToPhotosAlbum(options) {
        return options;
    }
    saveVideoToPhotosAlbum(options) {
        return options;
    }
    compressImage(options) {
        return options;
    }
    showNavigationBarLoading() { }
    hideNavigationBarLoading() { }
    startSoterAuthentication(options) {
        return options;
    }
    checkIsSupportSoterAuthentication(options) {
        return options;
    }
    checkIsSoterEnrolledInDevice(options) {
        return options;
    }
    // @ts-ignore
    chooseMediaAssets(options) {
        return options;
    }
    // @ts-ignore
    chooseMediumAssets(options) {
        return options;
    }
    // @ts-ignore
    getVideoInfo(options) {
        return options;
    }
    // @ts-ignore
    getImageInfo(options) {
        return options;
    }
    // @ts-ignore
    compressVideo(options) {
        return options;
    }
    // @ts-ignore
    openDocument(options) {
        return options;
    }
    // @ts-ignore
    login(options) {
        return options;
    }
    // @ts-ignore
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setNavigationStyle(options) { }
    // @ts-ignore
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setCapsuleState(options) { }
    // @ts-ignore
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getCapsuleState(options) { }
    // @ts-ignore
    getUserInfo(options) {
        return options;
    }
    // @ts-ignore
    openSetting(options) {
        return options;
    }
    // @ts-ignore
    getSetting(options) {
        return options;
    }
    // @ts-ignore
    setKeepScreenOn(options) {
        return options;
    }
    // @ts-ignore
    onUserCaptureScreen(options) {
        return options;
    }
    // @ts-ignore
    offUserCaptureScreen(options) {
        return options;
    }
    // @ts-ignore
    setScreenBrightness(options) {
        return options;
    }
    // @ts-ignore
    getScreenBrightness(options) {
        return options;
    }
    // @ts-ignore
    hideKeyboard(options) {
        return options;
    }
    // @ts-ignore
    onKeyboardHeightChange(options) {
        return options;
    }
    // @ts-ignore
    offKeyboardHeightChange(options) {
        return options;
    }
    // @ts-ignore
    makePhoneCall(options) {
        return options;
    }
    // @ts-ignore
    getSavedFileList(options) {
        return options;
    }
    // @ts-ignore
    removeSavedFile(options) {
        return options;
    }
    // @ts-ignore
    getSavedFileInfo(options) {
        return options;
    }
    // @ts-ignore
    addPhoneContact(options) {
        return options;
    }
    // @ts-ignore
    scanCode(options) {
        return options;
    }
    // @ts-ignore
    vibrateShort(options) {
        return options;
    }
    // @ts-ignore
    vibrateLong(options) {
        return options;
    }
    // NativeUpdateManager
    // @ts-ignore
    applyUpdate() { }
    // @ts-ignore
    onCheckForUpdate(options) {
        return options;
    }
    // @ts-ignore
    onUpdateFailed(options) {
        return options;
    }
    // @ts-ignore
    onUpdateReady(options) {
        return options;
    }
    // @ts-ignore
    downloadFile(options) {
        return options;
    }
    // NativeFileSystemManager
    // @ts-ignore
    getFileManager() { }
    // @ts-ignore
    access(option) {
        return option;
    }
    // @ts-ignore
    saveFile(option) {
        return option;
    }
    getFileInformation(_option) { }
    getFileInfo(_option) { }
    // @ts-ignore
    readFile(option) {
        return option;
    }
    // @ts-ignore
    readFileSync(option) {
        return option;
    }
    // @ts-ignore
    openAppAuthorizeSetting(option) {
        return option;
    }
    // @ts-ignore
    requestSubscribeMessage(option) {
        return option;
    }
    // @ts-ignore
    closeBLEConnection(option) {
        return option;
    }
    // @ts-ignore
    createBLEConnection(option) {
        return option;
    }
    // @ts-ignore
    getBLEDeviceCharacteristics(option) {
        return option;
    }
    // @ts-ignore
    getBLEDeviceRSSI(option) {
        return option;
    }
    // @ts-ignore
    getBLEDeviceServices(option) {
        return option;
    }
    // @ts-ignore
    notifyBLECharacteristicValueChange(option) {
        return option;
    }
    // @ts-ignore
    onBLECharacteristicValueChange(option) {
        return option;
    }
    // @ts-ignore
    onBLEConnectionStateChange(option) {
        return option;
    }
    // @ts-ignore
    readBLECharacteristicValue(option) {
        return option;
    }
    // @ts-ignore
    setBLEMTU(option) {
        return option;
    }
    // @ts-ignore
    writeBLECharacteristicValue(option) {
        return option;
    }
    // @ts-ignore
    closeBluetoothAdapter(option) {
        return option;
    }
    // @ts-ignore
    getBluetoothAdapterState(option) {
        return option;
    }
    // @ts-ignore
    getBluetoothDevices(option) {
        return option;
    }
    // @ts-ignore
    getConnectedBluetoothDevices(option) {
        return option;
    }
    // @ts-ignore
    offBluetoothAdapterStateChange(option) {
        return option;
    }
    // @ts-ignore
    offBluetoothDeviceFound(option) {
        return option;
    }
    // @ts-ignore
    onBluetoothAdapterStateChange(option) {
        return option;
    }
    // @ts-ignore
    onBluetoothDeviceFound(option) {
        return option;
    }
    // @ts-ignore
    openBluetoothAdapter(option) {
        return option;
    }
    // @ts-ignore
    startBluetoothDevicesDiscovery(option) {
        return option;
    }
    // @ts-ignore
    stopBluetoothDevicesDiscovery(option) {
        return option;
    }
    // @ts-ignore
    // @(syncAndRelease)
    // getExecStatus (option: any): any {
    //   // 获取缓存数据
    //   return option
    // }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setStorage(option) { }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeStorage(option) { }
    // @ts-ignore
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getStorage(option) { }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getStorageSync(key) { }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    batchGetPageShowDataStorage(options) { }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updatePageShowDataKeys(options) { }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getStorageInfo(option) { }
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    clearStorage(option) { }
    callInstance(option) {
        return option;
    }
    createInstance(option) {
        return option;
    }
    syncAndReleaseInstance(option) {
        return option;
    }
    callInstanceAsync(option) {
        return option;
    }
    onNativeNavigate(_options) { }
    exitMiniProgram(option) {
        return option;
    }
    onStorageStatusChange(_options) { }
    offStorageStatusChange(_options) { }
}
__decorate([
    (asyncAndNotRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "registerNativeListener", null);
__decorate([
    syncApiCache(),
    (syncAndRelease)
], NativeApi.prototype, "getWindowInfo", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getDeviceInfo", null);
__decorate([
    syncApiCache(),
    (syncAndRelease)
], NativeApi.prototype, "getSystemInfoSync", null);
__decorate([
    syncApiCache(),
    (syncAndRelease)
], NativeApi.prototype, "getSystemSetting", null);
__decorate([
    syncApiCache(),
    (syncAndRelease)
], NativeApi.prototype, "getAppBaseInfo", null);
__decorate([
    syncApiCache(),
    (syncAndRelease)
], NativeApi.prototype, "getAppAuthorizeSetting", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "setNavigationBarColor", null);
__decorate([
    syncApiCache(),
    (syncAndRelease)
], NativeApi.prototype, "getMenuButtonBoundingClientRect", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "request", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "saveDataUrlToFile", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "copyFileToSandboxCache", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "startAccelerometer", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "stopAccelerometer", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onAccelerometerChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "offAccelerometerChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "startCompass", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "stopCompass", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onCompassChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "offCompassChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "startGyroscope", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "stopGyroscope", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onGyroscopeChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "saveImageToPhotosAlbum", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "saveVideoToPhotosAlbum", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "compressImage", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "showNavigationBarLoading", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "hideNavigationBarLoading", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "startSoterAuthentication", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "checkIsSupportSoterAuthentication", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "checkIsSoterEnrolledInDevice", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "chooseMediaAssets", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "chooseMediumAssets", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getVideoInfo", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getImageInfo", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "compressVideo", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "openDocument", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "login", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "setNavigationStyle", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "setCapsuleState", null);
__decorate([
    (syncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "getCapsuleState", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getUserInfo", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "openSetting", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "getSetting", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "setKeepScreenOn", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onUserCaptureScreen", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "offUserCaptureScreen", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "setScreenBrightness", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getScreenBrightness", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "hideKeyboard", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "onKeyboardHeightChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "offKeyboardHeightChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "makePhoneCall", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getSavedFileList", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "removeSavedFile", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getSavedFileInfo", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "addPhoneContact", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "scanCode", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "vibrateShort", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "vibrateLong", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "applyUpdate", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "onCheckForUpdate", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "onUpdateFailed", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "onUpdateReady", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "downloadFile", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getFileManager", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "access", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "saveFile", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "getFileInformation", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "getFileInfo", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "readFile", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "readFileSync", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "openAppAuthorizeSetting", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "requestSubscribeMessage", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "closeBLEConnection", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "createBLEConnection", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getBLEDeviceCharacteristics", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getBLEDeviceRSSI", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getBLEDeviceServices", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "notifyBLECharacteristicValueChange", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onBLECharacteristicValueChange", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onBLEConnectionStateChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "readBLECharacteristicValue", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "setBLEMTU", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "writeBLECharacteristicValue", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "closeBluetoothAdapter", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getBluetoothAdapterState", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getBluetoothDevices", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "getConnectedBluetoothDevices", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "offBluetoothAdapterStateChange", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "offBluetoothDeviceFound", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onBluetoothAdapterStateChange", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onBluetoothDeviceFound", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "openBluetoothAdapter", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "startBluetoothDevicesDiscovery", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "stopBluetoothDevicesDiscovery", null);
__decorate([
    (asyncAndNotRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "setStorage", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "removeStorage", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "getStorage", null);
__decorate([
    (syncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "getStorageSync", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "batchGetPageShowDataStorage", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "updatePageShowDataKeys", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "getStorageInfo", null);
__decorate([
    (asyncAndRelease)
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
], NativeApi.prototype, "clearStorage", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "callInstance", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "createInstance", null);
__decorate([
    (syncAndRelease)
], NativeApi.prototype, "syncAndReleaseInstance", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "callInstanceAsync", null);
__decorate([
    (asyncAndNotRelease)
], NativeApi.prototype, "onNativeNavigate", null);
__decorate([
    (asyncAndRelease)
], NativeApi.prototype, "exitMiniProgram", null);
__decorate([
    (syncAndNotRelease)
], NativeApi.prototype, "onStorageStatusChange", null);
__decorate([
    (syncAndNotRelease)
], NativeApi.prototype, "offStorageStatusChange", null);
// class AsyncToSyncProxy {
//   private readonly nativeApi: NativeApi
//   private readonly STATUS: Status = { done: false, data: '', errorMsg: `search timeout` }
//   private methods = ['setStorageSync', 'removeStorageSync', 'getStorageSync', 'getStorageInfoSync', 'clearStorageSync']
//
//   constructor (nativeApi: NativeApi) {
//     this.nativeApi = nativeApi
//   }
//
//   get (target: { [x: string]: any }, prop: string) {
//     if (this.methods.includes(prop)) {
//       return (...args: any[]) => {
//         const asyncFunc = prop.substring(0, prop.length - 'Sync'.length)
//         this.nativeApi[asyncFunc](...args)
//
//         let count = 0
//         while (count < 20000) {
//           count++
//           if (count % 2000 === 0) {
//             const status = this.nativeApi.getExecStatus({ method: prop, key: args[0].key })
//             if (status.done || status.errorMsg) {
//               return status
//             }
//           }
//         }
//         return this.STATUS
//       }
//     }
//     return target[prop]
//   }
// }
// class HybridProxy {
//   // private readonly useAxios: boolean
//   private readonly useOsChannel: boolean
//   private readonly cacheProxy: any
//   // private readonly requestApi = 'request'
//
//   constructor (useOsChannel: boolean, nativeApi: NativeApi) {
//     // this.useAxios = useAxios
//     this.useOsChannel = useOsChannel
//     this.cacheProxy = new Proxy(nativeApi, new CacheStorageProxy(nativeApi))
//   }
//
//   get (_target: any, prop: string) {
//     return (...args: any) => {
//       // if (this.useAxios && prop === this.requestApi) {
//       //   judgeUseAxios = this.useAxios
//       //   // @ts-ignore
//       //   return new RequestTask(...args)
//       // }
//       if (this.useOsChannel && osChannelApi.hasOwnProperty(prop)) {
//         return osChannelApi[prop](...args)
//       }
//       return this.cacheProxy[prop](...args)
//     }
//   }
// }
let native = new NativeApi();
// native = timeLog(native)
native = new Proxy(native, new SyncCacheProxyHandler(native));
native = storageCacheAndSyncProxy(native);
var native$1 = native;

export { NativeApi, native$1 as default };
//# sourceMappingURL=NativeApi.js.map
