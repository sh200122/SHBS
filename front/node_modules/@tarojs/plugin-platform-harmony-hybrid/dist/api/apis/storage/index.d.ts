import Taro from '@tarojs/api';
declare const createCacheManager: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * Taro.setStorage 的同步版本
 *
 * @canUse setStorageSync
 * @__object [key, data]
 */
declare const setStorageSync: typeof Taro.setStorageSync;
/**
 * 将数据存储在本地缓存中指定的 key 中
 *
 * @canUse setStorage
 * @__object [data, key]
 */
declare const setStorage: typeof Taro.setStorage;
/**
 * 根据 URL 销毁存在内存中的数据
 *
 * @canNotUse revokeBufferURL
 */
declare const revokeBufferURL: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * Taro.removeStorage 的同步版本
 *
 * @canUse removeStorageSync
 */
declare const removeStorageSync: typeof Taro.removeStorageSync;
/**
 * 从本地缓存中移除指定 key
 *
 * @canUse removeStorage
 * @__object [key]
 */
declare const removeStorage: typeof Taro.removeStorage;
/**
 * Taro.getStorage 的同步版本
 *
 * @canUse getStorageSync
 */
declare const getStorageSync: typeof Taro.getStorageSync;
/**
 * 从本地缓存中异步获取指定 key 的内容
 *
 * @canUse getStorage
 * @__object [key]
 * @__success [data]
 */
declare const getStorage: typeof Taro.getStorage;
/**
 * Taro.getStorageInfo 的同步版本
 *
 * @canNotUse getStorageInfoSync
 * @__return [currentSize, keys, limitSize]
 */
declare const getStorageInfoSync: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * 异步获取当前storage的相关信息
 *
 * @canUse getStorageInfo
 * @__success [currentSize, keys, limitSize]
 */
declare const getStorageInfo: typeof Taro.getStorageInfo;
/**
 * 根据传入的 buffer 创建一个唯一的 URL 存在内存中
 *
 * @canNotUse createBufferURL
 */
declare const createBufferURL: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * Taro.clearStorage 的同步版本
 *
 * @canUse clearStorageSync
 */
declare const clearStorageSync: typeof Taro.clearStorageSync;
/**
 * 清除storage信息
 *
 * @canUse clearStorage
 */
declare const clearStorage: typeof Taro.clearStorage;
/**
 * 创建缓存管理器
 *
 * @canNotUse createCacheManager
 */
export * from "./background-fetch.js";
export { createCacheManager, setStorageSync, setStorage, revokeBufferURL, removeStorageSync, removeStorage, getStorageSync, getStorage, getStorageInfoSync, getStorageInfo, createBufferURL, clearStorageSync, clearStorage };
