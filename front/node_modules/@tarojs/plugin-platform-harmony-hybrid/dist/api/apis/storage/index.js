import native from '../NativeApi.js';
import { temporarilyNotSupport, shouldBeObject } from '../utils/index.js';
import { MethodHandler } from '../utils/handler.js';
import { handleData } from './util.js';
import './background-fetch.js';

// 周期性更新
const createCacheManager = /* @__PURE__ */ temporarilyNotSupport('createCacheManager');
/**
 * Taro.setStorage 的同步版本
 *
 * @canUse setStorageSync
 * @__object [key, data]
 */
const setStorageSync = (key, data = '') => {
    // @ts-ignore
    native.setStorageSync({
        key: key,
        data: JSON.stringify(handleData(data))
    });
    // displayExecRes(status, setStorageSync.name)
};
/**
 * 将数据存储在本地缓存中指定的 key 中
 *
 * @canUse setStorage
 * @__object [data, key]
 */
// @ts-ignore
const setStorage = (options) => {
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `setStorage:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { key, data, success, fail, complete } = options;
    const handle = new MethodHandler({ name: 'setStorage', success, fail, complete });
    return new Promise((resolve, reject) => {
        native.setStorage({
            key: key,
            data: JSON.stringify(handleData(data)),
            success: (res) => {
                handle.success({ errMsg: res.errMsg }, { resolve, reject });
            },
            fail: (err) => {
                handle.fail({ errMsg: err.errMsg }, { resolve, reject });
            },
        });
    });
};
/**
 * 根据 URL 销毁存在内存中的数据
 *
 * @canNotUse revokeBufferURL
 */
const revokeBufferURL = /* @__PURE__ */ temporarilyNotSupport('revokeBufferURL');
/**
 * Taro.removeStorage 的同步版本
 *
 * @canUse removeStorageSync
 */
const removeStorageSync = (key) => {
    // @ts-ignore
    native.removeStorageSync({ key });
    // displayExecRes(status, removeStorageSync.name)
};
/**
 * 从本地缓存中移除指定 key
 *
 * @canUse removeStorage
 * @__object [key]
 */
const removeStorage = (options) => {
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `removeStorage:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { key, success, fail, complete } = options;
    const handle = new MethodHandler({ name: 'removeStorage', success, fail, complete });
    return new Promise((resolve, reject) => {
        native.removeStorage({
            key: key,
            success: (res) => {
                handle.success({ errMsg: res.errMsg }, { resolve, reject });
            },
            fail: (err) => {
                handle.fail({ errMsg: err.errMsg }, { resolve, reject });
            },
        });
    });
};
/**
 * Taro.getStorage 的同步版本
 *
 * @canUse getStorageSync
 */
// @ts-ignore
const getStorageSync = (key) => {
    const res = native.getStorageSync({ key });
    // 存储数据时，会把真实的数据包裹成{data: xxx} 的json格式
    let item;
    try {
        item = JSON.parse(res.data);
    }
    catch (e) {
        item = { data: '' };
    }
    return item.data;
};
/**
 * 从本地缓存中异步获取指定 key 的内容
 *
 * @canUse getStorage
 * @__object [key]
 * @__success [data]
 */
const getStorage = (options) => {
    // options must be an Object
    const isObject = shouldBeObject(options);
    if (!isObject.flag) {
        const res = { errMsg: `getStorage:fail ${isObject.msg}` };
        console.error(res.errMsg);
        return Promise.reject(res);
    }
    const { key, success, fail, complete } = options;
    const handle = new MethodHandler({
        name: 'getStorage',
        success,
        fail,
        complete,
    });
    return new Promise((resolve, reject) => {
        native.getStorage({
            key: key,
            success: (res) => {
                let item;
                try {
                    item = JSON.parse(res.data);
                }
                catch (e) {
                    item = { data: '' };
                }
                const result = {
                    data: item.data,
                    errMsg: res.errMsg,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail({ errMsg: err.errMsg }, { resolve, reject });
            },
        });
    });
};
/**
 * Taro.getStorageInfo 的同步版本
 *
 * @canNotUse getStorageInfoSync
 * @__return [currentSize, keys, limitSize]
 */
const getStorageInfoSync = temporarilyNotSupport('getStorageInfoSync');
/**
 * 异步获取当前storage的相关信息
 *
 * @canUse getStorageInfo
 * @__success [currentSize, keys, limitSize]
 */
const getStorageInfo = ({ success, fail, complete } = {}) => {
    const handle = new MethodHandler({
        name: 'getStorageInfo',
        success,
        fail,
        complete,
    });
    return new Promise((resolve, reject) => {
        native.getStorageInfo({
            success: (res) => {
                const result = {
                    keys: res.keys,
                    limitSize: NaN,
                    currentSize: NaN,
                };
                handle.success(result, { resolve, reject });
            },
            fail: (err) => {
                handle.fail({ errMsg: err.errMsg }, { resolve, reject });
            },
        });
    });
};
/**
 * 根据传入的 buffer 创建一个唯一的 URL 存在内存中
 *
 * @canNotUse createBufferURL
 */
const createBufferURL = /* @__PURE__ */ temporarilyNotSupport('createBufferURL');
/**
 * Taro.clearStorage 的同步版本
 *
 * @canUse clearStorageSync
 */
const clearStorageSync = () => {
    // @ts-ignore
    native.clearStorageSync({ key: '' });
    // displayExecRes(status, clearStorageSync.name)
};
/**
 * 清除storage信息
 *
 * @canUse clearStorage
 */
const clearStorage = ({ success, fail, complete } = {}) => {
    const handle = new MethodHandler({ name: 'clearStorage', success, fail, complete });
    return new Promise((resolve, reject) => {
        native.clearStorage({
            success: () => {
                handle.success({ errMsg: 'ok' }, { reject, resolve });
            },
            fail: (err) => {
                handle.fail({ errMsg: err.errMsg }, { reject, resolve });
            },
        });
    });
};

export { clearStorage, clearStorageSync, createBufferURL, createCacheManager, getStorage, getStorageInfo, getStorageInfoSync, getStorageSync, removeStorage, removeStorageSync, revokeBufferURL, setStorage, setStorageSync };
//# sourceMappingURL=index.js.map
