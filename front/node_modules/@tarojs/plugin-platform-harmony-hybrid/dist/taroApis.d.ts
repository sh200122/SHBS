import Taro from "@tarojs/api";
import { getAppInfo } from "@tarojs/taro-h5/dist/api/taro";
import Taro$1 from "@tarojs/taro";
declare const requirePlugin: () => {
    world: string;
    hello: () => void;
};
declare const Behavior: any, getEnv: any, ENV_TYPE: any, Link: any, interceptors: any, interceptorify: any, Current: any, options: any, eventCenter: any, Events: any, preload: any, history: any, pxTransform: any, initPxTransform: any, canIUseWebp: any;
declare const taro: typeof Taro;
/**
 * 激励视频广告组件类
 * -
 * @canNotUse RewardedVideoAd
 */
/**
 * 创建插屏广告组件
 *
 * @canUse createInterstitialAd
 * @null_implementation
 */
declare const createInterstitialAd: () => InterstitialAd;
/**
 * 插屏广告组件类
 *
 * @canUse InterstitialAd
 * @null_implementation
 */
declare class InterstitialAd implements Taro$1.InterstitialAd {
    destroy(): void;
    offClose(_callback: Taro$1.InterstitialAd.OnCloseCallback): void;
    offError(_callback: Taro$1.InterstitialAd.OnErrorCallback): void;
    offLoad(_callback: Taro$1.InterstitialAd.OnLoadCallback): void;
    onClose(_callback: Taro$1.InterstitialAd.OnCloseCallback): void;
    onError(_callback: Taro$1.InterstitialAd.OnErrorCallback): void;
    onLoad(_callback: Taro$1.InterstitialAd.OnLoadCallback): void;
    load(): Promise<any>;
    show(): Promise<any>;
}
/**
 * 环境变量
 *
 * @canUse env
 * @__variable [FRAMEWORK, TARO_ENV, USER_DATA_PATH]
 */
declare const env: {
    FRAMEWORK: string | undefined;
    TARO_ENV: string | undefined;
    TARO_PLATFORM: string | undefined;
    TARO_VERSION: string | undefined;
    USER_DATA_PATH: string;
};
/**
 * 设置是否打开调试开关
 *
 * @canUse setEnableDebug
 * @null_implementation
 */
declare const setEnableDebug: typeof Taro.setEnableDebug;
/**
 * 获取实时日志管理器对象
 *
 * @canUse getRealtimeLogManager
 * @null_implementation
 */
declare const getRealtimeLogManager: typeof Taro.getRealtimeLogManager;
/**
 * 获取日志管理器对象
 *
 * @canUse getLogManager
 * @null_implementation
 */
declare const getLogManager: typeof Taro.getLogManager;
declare const getAppAuthorizeSetting: typeof Taro.getAppAuthorizeSetting;
declare const getSystemSetting: typeof Taro.getSystemSetting;
/**
 * 跳转系统授权管理页
 *
 * @canUse openAppAuthorizeSetting
 */
declare const openAppAuthorizeSetting: typeof Taro.openAppAuthorizeSetting;
/**
 * 获取窗口信息
 *
 * @canUse getWindowInfo
 * @__return
 * [pixelRatio, screenWidth, screenHeight, windowWidth, windowHeight, statusBarHeight, safeArea[\
 * bottom, height, left, right, top, width]]
 */
declare const getWindowInfo: typeof Taro.getWindowInfo;
/**
 * 获取设备基础信息
 *
 * @canUse getDeviceInfo
 * @__return [benchmarkLevel, brand, model, system, platform]
 */
declare const getDeviceInfo: typeof Taro.getDeviceInfo;
/**
 * 获取APP基础信息
 *
 * @canUse getAppBaseInfo
 * @__return [SDKVersion, enableDebug, host[appId], language, version, theme[dark, light]]
 */
declare const getAppBaseInfo: typeof Taro.getAppBaseInfo;
/**
 * 获取系统信息Taro.getSystemInfo的同步版本
 *
 * @canUse getSystemInfoSync
 * @__return
 * [brand, model, pixelRatio, screenWidth, screenHeight, windowWidth, windowHeight, statusBarHeight,\
 * language, version, system, platform, fontSizeSetting, SDKVersion, benchmarkLevel, albumAuthorized,\
 * cameraAuthorized, locationAuthorized, microphoneAuthorized, notificationAuthorized, phoneCalendarAuthorized,\
 * bluetoothEnabled, locationEnabled, wifiEnabled, safeArea[bottom, height, left, right, top, width],\
 * locationReducedAccuracy, theme[dark, light], host[appId], enableDebug, deviceOrientation[portrait, landscape]]
 */
declare const getSystemInfoSync: typeof Taro.getSystemInfoSync;
/**
 * 异步获取系统信息
 *
 * @canUse getSystemInfoAsync
 * @__success
 * [brand, model, pixelRatio, screenWidth, screenHeight, windowWidth, windowHeight, statusBarHeight,\
 * language, version, system, platform, fontSizeSetting, SDKVersion, benchmarkLevel, albumAuthorized,\
 * cameraAuthorized, locationAuthorized, microphoneAuthorized, notificationAuthorized, phoneCalendarAuthorized,\
 * bluetoothEnabled, locationEnabled, wifiEnabled, safeArea[bottom, height, left, right, top, width],\
 * locationReducedAccuracy, theme[dark, light], host[appId], enableDebug, deviceOrientation[portrait, landscape]]
 */
declare const getSystemInfoAsync: typeof Taro.getSystemInfoAsync;
/**
 * 获取系统信息
 *
 * @canUse getSystemInfo
 * @__success
 * [brand, model, pixelRatio, screenWidth, screenHeight, windowWidth, windowHeight, statusBarHeight,\
 * language, version, system, platform, fontSizeSetting, SDKVersion, benchmarkLevel, albumAuthorized,\
 * cameraAuthorized, locationAuthorized, microphoneAuthorized, notificationAuthorized, phoneCalendarAuthorized,\
 * bluetoothEnabled, locationEnabled, wifiEnabled, safeArea[bottom, height, left, right, top, width],\
 * locationReducedAccuracy, theme[dark, light], host[appId], enableDebug, deviceOrientation[portrait, landscape]]
 */
declare const getSystemInfo: typeof Taro.getSystemInfo;
/**
 * 获取全局唯一的版本更新管理器
 *
 * @canUse getUpdateManager
 */
declare const getUpdateManager: typeof Taro.getUpdateManager;
declare function initLaunchOptions(options?: {}): void;
/**
 * 获取程序启动时的参数
 *
 * @canUse getLaunchOptionsSync
 * @__return [path, query, scene, shareTicket, referrerInfo, apiCategory]
 */
declare const getLaunchOptionsSync: typeof Taro.getLaunchOptionsSync;
/**
 * 创建 canvas 的绘图上下文 CanvasContext 对象
 *
 * @canUse createCanvasContext
 */
declare const createCanvasContext: typeof Taro.createCanvasContext;
/**
 * 把当前画布指定区域的内容导出生成指定大小的图片
 *
 * @canUse canvasToTempFilePath
 * @__object [canvas, canvasId, quality, destHeight, destWidth, fileType[jpg, png], height, width, x, y]
 * @__success [tempFilePath]
 */
declare const canvasToTempFilePath: typeof Taro.canvasToTempFilePath;
/**
 * 将像素数据绘制到画布
 *
 * @canUse canvasPutImageData
 * @__object [canvasId, data, x, y]
 */
declare const canvasPutImageData: typeof Taro.canvasPutImageData;
/**
 * 获取 canvas 区域隐含的像素数据。
 *
 * @canUse canvasGetImageData
 * @__object [canvasId, x, y, height, width]
 * @__success [data, height, width]
 */
declare const canvasGetImageData: typeof Taro.canvasGetImageData;
/**
 * 云开发 SDK 实例
 *
 * @canUse cloud
 * @null_implementation
 */
declare class cloud implements Taro.cloud {
    Cloud: new (options: Taro.cloud.IOptions) => Taro.Cloud;
    init: (config?: Taro.cloud.IInitConfig) => void;
    CloudID: (cloudID: string) => void;
    // @ts-ignore
    callFunction: (param: any) => void;
    // @ts-ignore
    uploadFile: (param: any) => void;
    // @ts-ignore
    downloadFile: (param: any) => void;
    // @ts-ignore
    getTempFileURL: (param: any) => void;
    // @ts-ignore
    deleteFile: (param: any) => void;
    // @ts-ignore
    database: (config?: Taro.cloud.IConfig) => void;
    // @ts-ignore
    callContainer: (params: any) => void;
}
/**
 * canvas 组件的绘图上下文
 *
 * @canUse getExptInfoSync
 * @null_implementation
 */
declare const getExptInfoSync: () => {};
/**
 * canvas 组件的绘图上下文
 *
 * @canUse reportAnalytics
 * @null_implementation
 */
declare const reportAnalytics: () => void;
/**
 * 取消监听加速度数据事件，参数为空，则取消所有的事件监听
 *
 * @canUse offAccelerometerChange
 */
declare const offAccelerometerChange: typeof Taro$1.offAccelerometerChange;
/**
 * 监听加速度数据事件。频率根据 Taro.startAccelerometer() 的 interval 参数。可使用 Taro.stopAccelerometer() 停止监听。
 *
 * @canUse onAccelerometerChange
 * @__callback [x, y, z]
 */
declare const onAccelerometerChange: typeof Taro$1.onAccelerometerChange;
/**
 * 开始监听加速度数据。
 *
 * @canUse startAccelerometer
 * @__object [interval[game, ui, normal]]
 */
declare const startAccelerometer: typeof Taro$1.startAccelerometer;
/**
 * 停止监听加速度数据。
 *
 * @canUse stopAccelerometer
 */
declare const stopAccelerometer: typeof Taro$1.stopAccelerometer;
/**
 * 关闭蓝牙模块
 *
 * @canUse closeBluetoothAdapter
 */
declare const closeBluetoothAdapter: typeof Taro$1.closeBluetoothAdapter;
/**
 * 获取本机蓝牙适配器状态
 *
 * @canUse getBluetoothAdapterState
 * @__success [available, discovering]
 */
declare const getBluetoothAdapterState: typeof Taro$1.getBluetoothAdapterState;
/**
 * 获取在蓝牙模块生效期间所有已发现的蓝牙设备
 *
 * @canUse getBluetoothDevices
 * @__success [devices]
 */
declare const getBluetoothDevices: typeof Taro$1.getBluetoothDevices;
/**
 * 根据 uuid 获取处于已连接状态的设备
 *
 * @canUse getConnectedBluetoothDevices
 * @__object [services]
 * @__success [devices]
 */
declare const getConnectedBluetoothDevices: typeof Taro$1.getConnectedBluetoothDevices;
/**
 * 取消监听蓝牙适配器状态变化事件
 *
 * @canUse offBluetoothAdapterStateChange
 */
declare const offBluetoothAdapterStateChange: typeof Taro$1.offBluetoothAdapterStateChange;
/**
 * 取消监听寻找到新设备的事件
 *
 * @canUse offBluetoothDeviceFound
 */
declare const offBluetoothDeviceFound: typeof Taro$1.offBluetoothDeviceFound;
/**
 * 监听蓝牙适配器状态变化事件
 *
 * @canUse onBluetoothAdapterStateChange
 * @__callback [available, discovering]
 */
declare const onBluetoothAdapterStateChange: typeof Taro$1.onBluetoothAdapterStateChange;
/**
 * 监听寻找到新设备的事件
 *
 * @canUse onBluetoothDeviceFound
 * @__callback [devices]
 */
declare const onBluetoothDeviceFound: typeof Taro$1.onBluetoothDeviceFound;
/**
 * 初始化蓝牙模块
 *
 * @canUse openBluetoothAdapter
 */
declare const openBluetoothAdapter: typeof Taro$1.openBluetoothAdapter;
/**
 * 开始搜寻附近的蓝牙外围设备
 *
 * @canUse startBluetoothDevicesDiscovery
 * @__object [allowDuplicatesKey, interval, services]
 */
declare const startBluetoothDevicesDiscovery: typeof Taro$1.startBluetoothDevicesDiscovery;
/**
 * 停止搜寻附近的蓝牙外围设备
 *
 * @canUse stopBluetoothDevicesDiscovery
 */
declare const stopBluetoothDevicesDiscovery: typeof Taro$1.stopBluetoothDevicesDiscovery;
/**
 * 断开与低功耗蓝牙设备的连接
 *
 * @canUse closeBLEConnection
 * @__object [deviceId]
 */
declare const closeBLEConnection: typeof Taro$1.closeBLEConnection;
/**
 * 连接低功耗蓝牙设备
 *
 * @canUse createBLEConnection
 * @__object [deviceId, timeout]
 */
declare const createBLEConnection: typeof Taro$1.createBLEConnection;
/**
 * 获取蓝牙设备某个服务中所有特征值
 *
 * @canUse getBLEDeviceCharacteristics
 * @__object [deviceId, serviceId]
 * @__success [characteristics]
 */
declare const getBLEDeviceCharacteristics: typeof Taro$1.getBLEDeviceCharacteristics;
/**
 * 获取蓝牙低功耗设备的信号强度
 *
 * @canUse getBLEDeviceRSSI
 * @__object [deviceId]
 * @__success [RSSI]
 */
declare const getBLEDeviceRSSI: typeof Taro$1.getBLEDeviceRSSI;
/**
 * 获取蓝牙设备所有服务(service)
 *
 * @canUse getBLEDeviceServices
 * @__object [deviceId]
 * @__success [services]
 */
declare const getBLEDeviceServices: typeof Taro$1.getBLEDeviceServices;
/**
 * 启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值
 *
 * @canUse notifyBLECharacteristicValueChange
 * @__object [characteristicId, deviceId, serviceId, state]
 */
declare const notifyBLECharacteristicValueChange: typeof Taro$1.notifyBLECharacteristicValueChange;
/**
 * 监听低功耗蓝牙设备的特征值变化事件
 *
 * @canUse onBLECharacteristicValueChange
 * @__callback [characteristicId, deviceId, serviceId, value]
 */
declare const onBLECharacteristicValueChange: typeof Taro$1.onBLECharacteristicValueChange;
/**
 * 监听低功耗蓝牙连接状态的改变事件
 *
 * @canUse onBLEConnectionStateChange
 * @__callback [connected, deviceId]
 */
declare const onBLEConnectionStateChange: typeof Taro$1.onBLEConnectionStateChange;
/**
 * 读取低功耗蓝牙设备的特征值的二进制数据值
 *
 * @canUse readBLECharacteristicValue
 * @__object [characteristicId, deviceId, serviceId]
 */
declare const readBLECharacteristicValue: typeof Taro$1.readBLECharacteristicValue;
/**
 * 协商设置蓝牙低功耗的最大传输单元
 *
 * @canUse setBLEMTU
 * @__object [deviceId, mtu]
 * @__success [mtu]
 */
declare const setBLEMTU: typeof Taro$1.setBLEMTU;
/**
 * 向低功耗蓝牙设备特征值中写入二进制数据
 *
 * @canUse writeBLECharacteristicValue
 * @__object [characteristicId, deviceId, serviceId, value]
 */
declare const writeBLECharacteristicValue: typeof Taro$1.writeBLECharacteristicValue;
/**
 * 取消监听罗盘数据变化事件，参数为空，则取消所有的事件监听。
 *
 * @canUse offCompassChange
 */
declare const offCompassChange: typeof Taro.offCompassChange;
/**
 * 监听罗盘数据变化事件。频率：5 次/秒，接口调用后会自动开始监听，可使用 stopCompass 停止监听
 *
 * @canUse onCompassChange
 * @__callback [accuracy, direction]
 */
declare const onCompassChange: typeof Taro.onCompassChange;
/**
 * 开始监听罗盘数据
 *
 * @canUse startCompass
 */
declare const startCompass: typeof Taro.startCompass;
/**
 * 停止监听罗盘数据
 *
 * @canUse stopCompass
 */
declare const stopCompass: typeof Taro.stopCompass;
/**
 * 添加手机通讯录联系人
 *
 * @canUse addPhoneContact
 * @__object [firstName, photoFilePath, nickName, middleName, lastName, remark, mobilePhoneNumber,\
 * weChatNumber, addressCountry, addressState, addressCity, addressStreet, addressPostalCode,\
 * organization, title, workFaxNumber, workPhoneNumber, hostNumber, email, url, workAddressCountry,\
 * workAddressState, workAddressCity, workAddressStreet, workAddressPostalCode, homeFaxNumber,\
 * homePhoneNumber, homeAddressCountry, homeAddressState, homeAddressCity, homeAddressStreet,\
 * homeAddressPostalCode]
 */
declare const addPhoneContact: typeof Taro$1.addPhoneContact;
/**
 * 监听陀螺仪数据变化事件。频率根据 Taro.startGyroscope() 的 interval 参数。可以使用 Taro.stopGyroscope() 停止监听。
 *
 * @canUse onGyroscopeChange
 * @__callback [x, y, z]
 */
declare const onGyroscopeChange: typeof Taro$1.onGyroscopeChange;
/**
 * 开始监听陀螺仪数据
 *
 * @canUse startGyroscope
 * @__object [interval[game, ui, normal]]
 */
declare const startGyroscope: typeof Taro$1.startGyroscope;
/**
 * 停止监听陀螺仪数据
 *
 * @canUse stopGyroscope
 */
declare const stopGyroscope: typeof Taro$1.stopGyroscope;
declare const hideKeyboard: typeof Taro$1.hideKeyboard;
/**
 * 取消监听键盘高度变化事件
 *
 * @canUse offKeyboardHeightChange
 */
declare const offKeyboardHeightChange: typeof Taro$1.offKeyboardHeightChange;
/**
 * 监听键盘高度变化
 *
 * @canUse onKeyboardHeightChange
 * @__callback [height]
 */
declare const onKeyboardHeightChange: typeof Taro$1.onKeyboardHeightChange;
/**
 * 取消监听内存不足告警事件
 *
 * @canUse offMemoryWarning
 * @null_implementation
 */
declare const offMemoryWarning: typeof Taro$1.offMemoryWarning;
/**
 * 监听内存不足告警事件
 *
 * @canUse onMemoryWarning
 * @null_implementation
 */
declare const onMemoryWarning: typeof Taro$1.onMemoryWarning;
declare const makePhoneCall: typeof Taro.makePhoneCall;
/**
 * 调起客户端扫码界面，扫码成功后返回对应的结果
 *
 * @canUse scanCode
 * @__object [onlyFromCamera, scanType[barCode, qrCode, datamatrix, pdf417]]
 * @__success [charSet, rawData, result, scanType[QR_CODE, AZTEC, CODABAR, CODE_39, CODE_93, CODE_128,\
 * DATA_MATRIX, EAN_8, EAN_13, ITF, PDF_417, UPC_A, UPC_E]]
 */
declare const scanCode: typeof Taro.scanCode;
/**
 * 获取屏幕亮度
 *
 * @canUse getScreenBrightness
 * @__success [value]
 */
declare const getScreenBrightness: typeof Taro$1.getScreenBrightness;
/**
 * 取消用户主动截屏事件监听
 *
 * @canUse offUserCaptureScreen
 */
declare const offUserCaptureScreen: typeof Taro$1.offUserCaptureScreen;
/**
 * 监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件
 *
 * @canUse onUserCaptureScreen
 */
declare const onUserCaptureScreen: typeof Taro$1.onUserCaptureScreen;
/**
 * 设置是否保持常亮状态
 *
 * @canUse setKeepScreenOn
 * @__object [keepScreenOn]
 */
declare const setKeepScreenOn: typeof Taro$1.setKeepScreenOn;
/**
 * 设置屏幕亮度
 *
 * @canUse setScreenBrightness
 * @__object [value]
 */
declare const setScreenBrightness: typeof Taro$1.setScreenBrightness;
/**
 * 使手机发生较短时间的振动（15 ms）(harmony平台暂不支持入参type属性)
 *
 * @canUse vibrateShort
 */
declare const vibrateShort: typeof Taro.vibrateShort;
/**
 * 使手机发生较长时间的振动（400 ms)
 *
 * @canUse vibrateLong
 */
declare const vibrateLong: typeof Taro.vibrateLong;
/**
 * 获取已连接中的 Wi-Fi 信息
 *
 * @canUse getConnectedWifi
 * @__success [wifi]
 */
declare const getConnectedWifi: typeof Taro$1.getConnectedWifi;
/**
 * 取消监听获取到 Wi-Fi 列表数据事件
 *
 * @canUse offGetWifiList
 */
declare const offGetWifiList: typeof Taro$1.offGetWifiList;
/**
 * 取消监听连接上 Wi-Fi 的事件
 *
 * @canUse offWifiConnected
 */
declare const offWifiConnected: typeof Taro$1.offWifiConnected;
/**
 * 取消监听连接上 Wi-Fi 的事件
 *
 * @canUse offWifiConnectedWithPartialInfo
 */
declare const offWifiConnectedWithPartialInfo: typeof Taro$1.offWifiConnectedWithPartialInfo;
/**
 * 监听获取到 Wi-Fi 列表数据事件
 *
 * @canUse onGetWifiList
 * @__callback [wifiList]
 */
declare const onGetWifiList: typeof Taro$1.onGetWifiList;
/**
 * 监听连接上 Wi-Fi 的事件
 *
 * @canUse onWifiConnected
 * @__callback [wifi]
 */
declare const onWifiConnected: typeof Taro$1.onWifiConnected;
/**
 * 监听连接上 Wi-Fi 的事件
 *
 * @canUse onWifiConnectedWithPartialInfo
 * @__callback [wifi]
 */
declare const onWifiConnectedWithPartialInfo: typeof Taro$1.onWifiConnectedWithPartialInfo;
/**
 * 关闭监听实时位置变化，前后台都停止消息接收
 *
 * @canUse getFileInfo
 * @__object [filePath, digestAlgorithm]
 * @__success [size, digest]
 */
declare const getFileInfo: typeof Taro$1.getFileInfo;
/**
 * 获取全局唯一的文件管理器
 *
 * @canUse getFileSystemManager
 */
declare const getFileSystemManager: typeof Taro$1.getFileSystemManager;
/**
 * 获取本地文件的文件信息
 *
 * @canUse getSavedFileInfo
 * @__object [filePath]
 * @__success [createTime, size]
 */
declare const getSavedFileInfo: typeof Taro$1.getSavedFileInfo;
/**
 * 获取本地已保存的文件列表
 *
 * @canUse getSavedFileList
 * @__success [fileList]
 */
declare const getSavedFileList: typeof Taro$1.getSavedFileList;
/**
 * 新开页面打开文档，支持格式
 *
 * @canUse openDocument
 * @null_implementation
 */
declare const openDocument: typeof Taro$1.openDocument;
/**
 * 新开页面打开文档，支持格式
 *
 * @canUse removeSavedFile
 * @__object [filePath]
 */
declare const removeSavedFile: typeof Taro$1.removeSavedFile;
/**
 * 保存文件到本地
 *
 * @canUse saveFile
 * @__object [tempFilePath, filePath]
 * @__success [savedFilePath]
 */
declare const saveFile: typeof Taro$1.saveFile;
declare const getApp: typeof Taro.getApp;
// 自定义组件
declare const getCurrentInstance: () => Taro.getCurrentInstance.Current;
/**
 * 打开地图选择位置。
 *
 * @canUse chooseLocation
 * @__object [latitude, longitude]
 * @__success [address, latitude, longitude, name]
 */
declare const chooseLocation: typeof Taro$1.chooseLocation;
/**
 * 获取当前的模糊地理位置
 *
 * @canUse getFuzzyLocation
 * @__object [type]
 * @__success [latitude, longitude]
 */
declare const getFuzzyLocation: typeof Taro$1.getFuzzyLocation;
/**
 * 获取当前的地理位置、速度
 *
 * @canUse getLocation
 * @__object [altitude, highAccuracyExpireTime, isHighAccuracy, type]
 * @__success [accuracy, altitude, horizontalAccuracy, latitude, longitude, speed, verticalAccuracy]
 */
declare const getLocation: typeof Taro$1.getLocation;
/**
 * 取消监听实时地理位置变化事件
 *
 * @canUse offLocationChange
 */
declare const offLocationChange: typeof Taro$1.offLocationChange;
/**
 * 取消监听持续定位接口返回失败时触发
 *
 * @canUse offLocationChangeError
 */
declare const offLocationChangeError: typeof Taro$1.offLocationChangeError;
/**
 * 监听实时地理位置变化事件
 *
 * @canUse onLocationChange
 * @__callback [accuracy, altitude, horizontalAccuracy, atitude, longitude, speed, verticalAccuracy]
 */
declare const onLocationChange: typeof Taro$1.onLocationChange;
/**
 * 监听持续定位接口返回失败时触发
 *
 * @canUse onLocationChangeError
 * @__callback [errCode]
 */
declare const onLocationChangeError: typeof Taro$1.onLocationChangeError;
/**
 * 打开地图查看位置。(暂不支持scale入参)
 *
 * @canUse openLocation
 * @__object [latitude, longitude, address, name]
 */
declare const openLocation: typeof Taro$1.openLocation;
/**
 * 开启小程序进入前台时接收位置消息
 *
 * @canUse startLocationUpdate
 */
declare const startLocationUpdate: typeof Taro$1.startLocationUpdate;
/**
 * 开启小程序进入前后台时均接收位置消息
 *
 * @canUse startLocationUpdateBackground
 */
declare const startLocationUpdateBackground: typeof Taro$1.startLocationUpdateBackground;
/**
 * 关闭监听实时位置变化，前后台都停止消息接收
 *
 * @canUse stopLocationUpdate
 */
declare const stopLocationUpdate: typeof Taro$1.stopLocationUpdate;
/**
 * 创建内部 audio 上下文 InnerAudioContext 对象。
 *
 * @canUse createInnerAudioContext
 */
// @ts-ignore
declare const createInnerAudioContext: typeof Taro.createInnerAudioContext;
/**
 * 创建 audio 上下文 AudioContext 对象
 *
 * @canUse createAudioContext
 */
declare const createAudioContext: typeof Taro.createAudioContext;
/**
 * 创建 camera 上下文 CameraContext 对象
 *
 * @canUse createCameraContext
 */
declare const createCameraContext: typeof Taro$1.createCameraContext;
/**
 * 压缩图片接口，可选压缩质量
 *
 * @canUse compressImage
 * @__object [src, quality, compressedWidth, compressedHeight]
 * @__success [tempFilePath]
 */
declare const compressImage: typeof Taro$1.compressImage;
/**
 * 从本地相册选择图片或使用相机拍照。
 *
 * @canUse getImageInfo
 * @__object [src]
 * @__success
 * [height, orientation[up, up-mirrored, down, down-mirrored, left-mirrored, right, right-mirrored, left],\
 * path, type, width]
 */
declare const getImageInfo: typeof Taro.getImageInfo;
/**
 * 在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。
 *
 * @canUse previewImage
 * @__object [urls, current, showmenu]
 */
declare const previewImage: typeof Taro$1.previewImage;
/**
 * previewImage api基于开源的React组件[react-wx-images-viewer](https://github.com/react-ld/react-wx-images-viewer)开发，感谢！
 * 在新页面中全屏预览图片/视频。预览的过程中用户可以进行保存图片/视频、发送给朋友等操作。
 *
 * @canUse previewMedia
 * @__object [sources, current]
 */
declare const previewMedia: typeof Taro$1.previewMedia;
/**
 * 保存图片到系统相册
 *
 * @canUse saveImageToPhotosAlbum
 * @__object [filePath]
 */
declare const saveImageToPhotosAlbum: typeof Taro.saveImageToPhotosAlbum;
/**
 * 从本地相册选择图片或使用相机拍照。
 *
 * @canUse chooseImage
 * @__object [count, sizeType[original, compressed], sourceType[album, camera]]
 * @__success [tempFilePaths, tempFiles]
 */
declare const chooseImage: typeof Taro.chooseImage;
/**
 * 创建 live-player 上下文 LivePlayerContext 对象
 *
 * @canUse createLivePlayerContext
 */
declare const createLivePlayerContext: typeof Taro.createLivePlayerContext;
/**
 * 创建 map 上下文 MapContext 对象。
 *
 * @canUse createMapContext
 */
declare const createMapContext: typeof Taro$1.createMapContext;
/**
 * 获取全局唯一的录音管理器
 *
 * @canUse getRecorderManager
 */
declare const getRecorderManager: typeof Taro$1.getRecorderManager;
/**
 * 获取视频详细信息
 *
 * @canUse getVideoInfo
 * @__object [src]
 * @__success
 * [orientation[up, down, left, right, up-mirrored, down-mirrored, left-mirrored, right-mirrored],\
 * type, duration, size, height, width, fps, bitrate]
 */
declare const getVideoInfo: typeof Taro$1.getVideoInfo;
/**
 * 打开视频编辑器
 *
 * @canUse openVideoEditor
 * @__object [filePath]
 * @__success [duration, size, tempFilePath, tempThumbPath]
 */
declare const openVideoEditor: typeof Taro$1.openVideoEditor;
/**
 * 保存视频到系统相册
 *
 * @canUse saveVideoToPhotosAlbum
 * @__object [filePath]
 */
declare const saveVideoToPhotosAlbum: typeof Taro.saveVideoToPhotosAlbum;
/**
 * 拍摄视频或从手机相册中选视频
 *
 * @canUse chooseVideo
 * @__object [camera[back, front], compressed, maxDuration, sourceType[album, camera]]
 * @__success [tempFilePath, duration, size, height, width]
 */
declare const chooseVideo: typeof Taro.chooseVideo;
/**
 * 压缩视频接口
 *
 * @canNotUse compressVideo
 * @null_implementation
 */
declare const compressVideo: typeof Taro$1.compressVideo;
declare const chooseMedia: (options: any, usePicker?: boolean) => Promise<chooseMedium.SuccessCallbackResult>;
/**
 * 保留当前页面，跳转到应用内的某个页面。
 * 重复点击时 navigateTo 会重复跳转，因此进行限制。
 *
 * @canUse navigateTo
 * @__object [url, events]
 */
declare function navigateTo(option: Taro.navigateTo.Option): any;
/**
 * 退出当前小程序。必须有点击行为才能调用成功。
 *
 * @canUse exitMiniProgram
 */
declare function exitMiniProgram(option?: any): void;
/**
 * 下载文件资源到本地。客户端直接发起一个 HTTPS GET 请求，返回文件的本地临时路径。使用前请注意阅读相关说明。
 * 注意：请在服务端响应的 header 中指定合理的 Content-Type 字段，以保证客户端正确处理文件类型。
 */
/**
 * 下载文件资源到本地
 *
 * @canUse downloadFile
 * @__object [url, filePath, header, timeout, withCredentials]
 * @__success [filePath, statusCode, tempFilePath, header, dataLength, cookies, profile]
 */
declare const downloadFile: typeof Taro.downloadFile;
/**
 * 发起 HTTPS 网络请求
 *
 * @canUse request
 * @__object [url, data, header, timeout, method[OPTIONS, GET, HEAD, POST, PUT, PATCH, DELETE, TRACE, CONNECT], dataType[json, text, base64, arraybuffer], responseType[text, arraybuffer], enableCache]
 * @__success [data, header, statusCode, cookies]
 * @param useNativeRequest 默认使用true
 */
declare function request(options: any, useNativeRequest?: boolean): any;
/**
 * 网络请求任务对象
 *
 * @canUse RequestTask
 * @__class [abort, onHeadersReceived, offHeadersReceived]
 */
/**
 * 使用拦截器
 *
 * @canUse addInterceptor
 */
declare function addInterceptor(interceptor: any, useNativeRequest?: boolean): any;
/**
 * 清除所有拦截器
 *
 * @canUse cleanInterceptors
 */
declare function cleanInterceptors(interceptor: any, useNativeRequest?: boolean): any;
declare class NativeUploadFile implements Taro.UploadTask {
    readonly className: string;
    private objectId;
    constructor(option: any);
    static getUploadTask(option: any): NativeUploadFile;
    abort(): void;
    offHeadersReceived(option: any): void;
    offProgressUpdate(option: any): void;
    onHeadersReceived(option: any): void;
    onProgressUpdate(option: any): void;
    destroy(): void;
}
/**
 * 将本地资源上传到服务器
 *
 * @canUse uploadFile
 * @__object [url, filePath, name, header, formData, timeout, fileName, withCredentials]
 * @__success [data, statusCode, header, cookies]
 */
declare const uploadFile: (options: any) => Promise<NativeUploadFile>;
/**
 * 获取当前帐号信息
 *
 * @canUse getAccountInfoSync
 * @null_implementation
 */
declare const getAccountInfoSync: () => {
    miniProgram: {};
    plugin: {};
};
/**
 * 仅小程序插件中能调用该接口
 *
 * @canUse authorizeForMiniProgram
 * @null_implementation
 */
declare const authorizeForMiniProgram: () => void;
/**
 * 打开视频号主页
 *
 * @canUse openChannelsUserProfile
 * @null_implementation
 */
declare const openChannelsUserProfile: () => void;
/**
 * 调用接口获取登录凭证（code）
 *
 * @canUse login
 * @__object [timeout]
 * @__success [code]
 */
declare const login: typeof Taro$1.login;
/**
 * 获取用户的当前设置
 *
 * @canUse getSetting
 * @__object [withSubscriptions]
 * @__success [authSetting, subscriptionsSetting, miniprogramAuthSetting]
 */
declare const getSetting: typeof Taro.getSetting;
/**
 * 调起客户端小程序设置界面，返回用户设置的操作结果
 *
 * @canUse openSetting
 * @__object [withSubscriptions]
 * @__success [authSetting, subscriptionsSetting]
 */
declare const openSetting: typeof Taro.openSetting;
/**
 * 获取设备内是否录入如指纹等生物信息的接口
 *
 * @canUse checkIsSoterEnrolledInDevice
 * @__object [checkAuthMode]
 * @__success [isEnrolled, errMsg]
 */
declare const checkIsSoterEnrolledInDevice: typeof Taro.checkIsSoterEnrolledInDevice;
/**
 * 获取本机支持的 SOTER 生物认证方式
 *
 * @canUse checkIsSupportSoterAuthentication
 * @__success [supportMode]
 */
declare const checkIsSupportSoterAuthentication: typeof Taro.checkIsSupportSoterAuthentication;
/**
 * 开始 SOTER 生物认证。
 *
 * @canUse startSoterAuthentication
 * @__object [challenge, requestAuthModes, authContent]
 * @__success [authMode, errCode, resultJSON, resultJSONSignature]
 */
declare const startSoterAuthentication: typeof Taro.startSoterAuthentication;
/**
 * 请求订阅消息
 *
 * @canUse requestSubscribeMessage
 * @__object [tmplIds]
 * @__success [errMsg, TEMPLATE_ID]
 */
declare const requestSubscribeMessage: (options: any) => void;
/**
 * 获取用户信息
 *
 * @canUse getUserInfo
 * @__object [lang, withCredentials]
 * @__success [userInfo]
 */
declare const getUserInfo: typeof Taro$1.getUserInfo;
/**
 * 发送微信支付
 *
 * @canUse requestPayment
 * @null_implementation
 */
declare const requestPayment: typeof Taro$1.requestPayment;
declare class NativeDataCache {
    private cache;
    keys(): string[];
    set(key: string, value: any): void;
    get(key: string): any;
    delete(key: string): boolean;
    has(key: string): boolean;
}
/**
 * 系统数据更新监听器
 */
interface NativeDataChangeListener {
    /**
     * 更新
     * @param methodName    要更新的方法名
     * @param methodArgs    要更新的方法参数，如果是空参，直接传[]
     */
    change: (methodName: string, methodArgs: any[]) => void;
    /**
     * 注册
     * @param methodName    要注册的方法名列表
     */
    register: (methodNames: string[]) => void;
    /**
     * 解注册
     * @param methodName    要解注册的方法名列表
     */
    unregister: (methodNames: string[]) => void;
}
/**
 * 同步数据缓存ProxyHandler
 */
declare class SyncCacheProxyHandler {
    private readonly nativeApi;
    private readonly listener;
    private readonly cache;
    private enableMethodNames;
    constructor(nativeApi: any);
    /**
     * 更新Native数据
     * @param cache         缓存数据
     * @param methodName    要更新的方法名
     * @param methodArgs    要更新的方法参数
     */
    private updateNativeData;
    /**
     * 生成cache的存储key
     * @param methodName    方法名
     * @param methodArgs    方法参数
     */
    private generateCacheKey;
    get(target: any, propKey: string | symbol, receiver: any): any;
}
/**
 * 显示当前页面的转发按钮
 *
 * @canUse showShareMenu
 * @null_implementation
 */
declare const showShareMenu: () => Promise<{}>;
/**
 * 隐藏当前页面的转发按钮
 *
 * @canUse hideShareMenu
 * @null_implementation
 */
declare const hideShareMenu: () => Promise<{}>;
/**
 * 获取转发详细信息
 *
 * @canUse getShareInfo
 * @null_implementation
 */
declare const getShareInfo: () => Promise<{}>;
/**
 * 拉取 backgroundFetch 客户端缓存数据
 *
 * @canUse getBackgroundFetchData
 * @null_implementation
 */
declare const getBackgroundFetchData: typeof Taro$1.getBackgroundFetchData;
/**
 * 拉取 backgroundFetch 客户端缓存数据
 *
 * @canUse setBackgroundFetchToken
 * @__object [token]
 */
declare const setBackgroundFetchToken: typeof Taro$1.setBackgroundFetchToken;
// 周期性更新
declare const createCacheManager: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * Taro.setStorage 的同步版本
 *
 * @canUse setStorageSync
 * @__object [key, data]
 */
declare const setStorageSync: typeof Taro.setStorageSync;
/**
 * 将数据存储在本地缓存中指定的 key 中
 *
 * @canUse setStorage
 * @__object [data, key]
 */
// @ts-ignore
declare const setStorage: typeof Taro.setStorage;
/**
 * 根据 URL 销毁存在内存中的数据
 *
 * @canNotUse revokeBufferURL
 */
declare const revokeBufferURL: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * Taro.removeStorage 的同步版本
 *
 * @canUse removeStorageSync
 */
declare const removeStorageSync: typeof Taro.removeStorageSync;
/**
 * 从本地缓存中移除指定 key
 *
 * @canUse removeStorage
 * @__object [key]
 */
declare const removeStorage: typeof Taro.removeStorage;
/**
 * Taro.getStorage 的同步版本
 *
 * @canUse getStorageSync
 */
// @ts-ignore
declare const getStorageSync: typeof Taro.getStorageSync;
/**
 * 从本地缓存中异步获取指定 key 的内容
 *
 * @canUse getStorage
 * @__object [key]
 * @__success [data]
 */
declare const getStorage: typeof Taro.getStorage;
/**
 * Taro.getStorageInfo 的同步版本
 *
 * @canNotUse getStorageInfoSync
 * @__return [currentSize, keys, limitSize]
 */
declare const getStorageInfoSync: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * 异步获取当前storage的相关信息
 *
 * @canUse getStorageInfo
 * @__success [currentSize, keys, limitSize]
 */
declare const getStorageInfo: typeof Taro.getStorageInfo;
/**
 * 根据传入的 buffer 创建一个唯一的 URL 存在内存中
 *
 * @canNotUse createBufferURL
 */
declare const createBufferURL: (option?: {}, ...args: any[]) => Promise<Partial<TaroGeneral.CallbackResult> & Record<string, unknown> & TaroGeneral.CallbackResult>;
/**
 * Taro.clearStorage 的同步版本
 *
 * @canUse clearStorageSync
 */
declare const clearStorageSync: typeof Taro.clearStorageSync;
/**
 * 清除storage信息
 *
 * @canUse clearStorage
 */
declare const clearStorage: typeof Taro.clearStorage;
/**
 * 延迟一部分操作到下一个时间片再执行
 *
 * @canUse nextTick
 */
declare const nextTick: (callback: (...args: any[]) => any) => void;
/**
 * 开启小程序页面返回询问对话框
 *
 * @canUse enableAlertBeforeUnload
 * @null_implementation
 */
declare const enableAlertBeforeUnload: () => void;
/**
 * 关闭小程序页面返回询问对话框
 *
 * @canUse disableAlertBeforeUnload
 * @null_implementation
 */
declare const disableAlertBeforeUnload: () => void;
/**
 * 获取菜单按钮（右上角胶囊按钮）的布局位置信息
 *
 * @canUse getMenuButtonBoundingClientRect
 * @__return [left, top, right, bottom, height, width]
 */
declare const getMenuButtonBoundingClientRect: typeof Taro.getMenuButtonBoundingClientRect;
/**
 * 显示页面导航条加载图标
 *
 * @canUse showNavigationBarLoading
 */
declare const showNavigationBarLoading: typeof Taro.showNavigationBarLoading;
/**
 * 隐藏页面导航条加载图标
 *
 * @canUse hideNavigationBarLoading
 */
declare const hideNavigationBarLoading: typeof Taro.hideNavigationBarLoading;
/**
 * 设置页面导航条标题
 *
 * @canUse setNavigationBarTitle
 * @__object [title]
 */
declare const setNavigationBarTitle: typeof Taro.hideNavigationBarLoading;
/**
 * 设置页面导航条颜色
 *
 * @canUse setNavigationBarColor
 * @__object [backgroundColor, frontColor, animation]
 */
declare const setNavigationBarColor: typeof Taro.setNavigationBarColor;
/**
 * 隐藏返回首页按钮
 *
 * @canUse hideHomeButton
 * @null_implementation
 */
declare const hideHomeButton: () => Promise<void>;
/**
 * 导航条与Web层叠布局，导航条可见情况下Web页面顶部空出一定高度的留白
 */
declare function loadNavigationStyle(): void;
/**
 * 监听导航栏设置、进入/退出全屏事件，更改导航栏样式以及显示/隐藏胶囊按钮
 */
declare function registerNavigationStyleHandler(): void;
/**
 * 动态设置置顶栏文字内容
 *
 * @canUse setTopBarText
 * @null_implementation
 */
declare const setTopBarText: () => Promise<void>;
/**
 * 返回一个 SelectorQuery 对象实例
 *
 * @canUse createSelectorQuery
 */
declare const createSelectorQuery: typeof Taro.createSelectorQuery;
/**
 * 创建并返回一个 IntersectionObserver 对象实例
 *
 * @canUse createIntersectionObserver
 */
declare const createIntersectionObserver: typeof Taro.createIntersectionObserver;
declare function canIUse(scheme?: string): any;
export { Taro$1 as default, taro, Behavior, canIUseWebp, Current, ENV_TYPE, eventCenter, Events, getAppInfo, getEnv, history, initPxTransform, interceptorify, interceptors, Link, options, preload, pxTransform, requirePlugin, createInterstitialAd, env, setEnableDebug, getRealtimeLogManager, getLogManager, getAppAuthorizeSetting, getSystemSetting, openAppAuthorizeSetting, getWindowInfo, getDeviceInfo, getAppBaseInfo, getSystemInfoSync, getSystemInfoAsync, getSystemInfo, getUpdateManager, initLaunchOptions, getLaunchOptionsSync, createCanvasContext, canvasToTempFilePath, canvasPutImageData, canvasGetImageData, cloud, getExptInfoSync, reportAnalytics, offAccelerometerChange, onAccelerometerChange, startAccelerometer, stopAccelerometer, closeBluetoothAdapter, getBluetoothAdapterState, getBluetoothDevices, getConnectedBluetoothDevices, offBluetoothAdapterStateChange, offBluetoothDeviceFound, onBluetoothAdapterStateChange, onBluetoothDeviceFound, openBluetoothAdapter, startBluetoothDevicesDiscovery, stopBluetoothDevicesDiscovery, closeBLEConnection, createBLEConnection, getBLEDeviceCharacteristics, getBLEDeviceRSSI, getBLEDeviceServices, notifyBLECharacteristicValueChange, onBLECharacteristicValueChange, onBLEConnectionStateChange, readBLECharacteristicValue, setBLEMTU, writeBLECharacteristicValue, offCompassChange, onCompassChange, startCompass, stopCompass, addPhoneContact, onGyroscopeChange, startGyroscope, stopGyroscope, hideKeyboard, offKeyboardHeightChange, onKeyboardHeightChange, offMemoryWarning, onMemoryWarning, makePhoneCall, scanCode, getScreenBrightness, offUserCaptureScreen, onUserCaptureScreen, setKeepScreenOn, setScreenBrightness, vibrateShort, vibrateLong, getConnectedWifi, offGetWifiList, offWifiConnected, offWifiConnectedWithPartialInfo, onGetWifiList, onWifiConnected, onWifiConnectedWithPartialInfo, getFileInfo, getFileSystemManager, getSavedFileInfo, getSavedFileList, openDocument, removeSavedFile, saveFile, getApp, getCurrentInstance, chooseLocation, getFuzzyLocation, getLocation, offLocationChange, offLocationChangeError, onLocationChange, onLocationChangeError, openLocation, startLocationUpdate, startLocationUpdateBackground, stopLocationUpdate, createInnerAudioContext, createAudioContext, createCameraContext, compressImage, getImageInfo, previewImage, previewMedia, saveImageToPhotosAlbum, chooseImage, createLivePlayerContext, createMapContext, getRecorderManager, getVideoInfo, openVideoEditor, saveVideoToPhotosAlbum, chooseVideo, compressVideo, chooseMedia, navigateTo, exitMiniProgram, downloadFile, request, addInterceptor, cleanInterceptors, uploadFile, getAccountInfoSync, authorizeForMiniProgram, openChannelsUserProfile, login, getSetting, openSetting, checkIsSoterEnrolledInDevice, checkIsSupportSoterAuthentication, startSoterAuthentication, requestSubscribeMessage, getUserInfo, requestPayment, NativeDataCache, NativeDataChangeListener, SyncCacheProxyHandler, showShareMenu, hideShareMenu, getShareInfo, getBackgroundFetchData, setBackgroundFetchToken, createCacheManager, setStorageSync, setStorage, revokeBufferURL, removeStorageSync, removeStorage, getStorageSync, getStorage, getStorageInfoSync, getStorageInfo, createBufferURL, clearStorageSync, clearStorage, nextTick, disableAlertBeforeUnload, enableAlertBeforeUnload, getMenuButtonBoundingClientRect, showNavigationBarLoading, hideNavigationBarLoading, setNavigationBarTitle, setNavigationBarColor, hideHomeButton, loadNavigationStyle, registerNavigationStyleHandler, setTopBarText, createSelectorQuery, createIntersectionObserver, canIUse };
export { createRewardedVideoAd, getInferenceEnvInfo, createInferenceSession, stopFaceDetect, initFaceDetect, faceDetect, isVKSupport, createVKSession, getOpenUserInfo, tradePay, openSystemBluetoothSetting, updateWeChatApp, createOffscreenCanvas, reportMonitor, reportEvent, checkIsOpenAccessibility, getBatteryInfoSync, getBatteryInfo, makeBluetoothPair, isBluetoothDevicePaired, onBLEMTUChange, offBLEMTUChange, offBLEConnectionStateChange, offBLECharacteristicValueChange, getBLEMTU, onBLEPeripheralConnectionStateChanged, offBLEPeripheralConnectionStateChanged, createBLEPeripheralServer, addPhoneRepeatCalendar, addPhoneCalendar, setClipboardData, getClipboardData, chooseContact, getRandomValues, offGyroscopeChange, offBeaconUpdate, offBeaconServiceChange, getBeacons, onBeaconServiceChange, onBeaconUpdate, startBeaconDiscovery, stopBeaconDiscovery, getSelectedTextRange, stopDeviceMotionListening, startDeviceMotionListening, onDeviceMotionChange, offDeviceMotionChange, getNetworkType, onNetworkWeakChange, onNetworkStatusChange, offNetworkWeakChange, offNetworkStatusChange, getLocalIPAddress, stopHCE, startHCE, sendHCEMessage, onHCEMessage, offHCEMessage, getNFCAdapter, getHCEState, setVisualEffectOnCapture, onScreenRecordingStateChanged, offScreenRecordingStateChanged, getScreenRecordingState, sendSms, addCard, addFileToFavorites, addRecentColorSign, addVideoToFavorites, applyAddToMyApps, arrayBufferToBase64, authorize, authPrivateMessage, base64ToArrayBuffer, batchGetStorage, batchGetStorageSync, batchSetStorage, batchSetStorageSync, checkIsAddedToMyMiniProgram, checkIsPictureInPictureActive, checkIsSupportFacialRecognition, checkSession, chooseAddress, chooseInvoice, chooseInvoiceTitle, chooseLicensePlate, chooseMessageFile, choosePoi, closeSocket, connectSocket, connectWifi, createAnimation, createLivePusherContext, createMediaAudioPlayer, createMediaContainer, createMediaQueryObserver, createMediaRecorder, createTCPSocket, createUDPSocket, createVideoContext, createVideoDecoder, createWebAudioContext, createWorker, cropImage, editImage, exitVoIPChat, faceVerifyForPay, getAvailableAudioSources, getBackgroundAudioManager, getBackgroundAudioPlayerState, getBackgroundFetchToken, getChannelsLiveInfo, getChannelsLiveNoticeInfo, getChannelsShareKey, getDeviceVoIPList, getEnterOptionsSync, getExtConfig, getExtConfigSync, getGroupEnterInfo, getGuildInfo, getPerformance, getPrivacySetting, getQQRunData, getRendererUserAgent, getSkylineInfo, getSkylineInfoSync, getUserCryptoManager, getUserProfile, getWeRunData, getWifiList, hideLoading, hideTabBar, hideTabBarRedDot, hideToast, initTabBarApis, isAddedToMyApps, join1v1Chat, joinVoIPChat, loadFontFace, navigateBack, navigateBackMiniProgram, navigateToMiniProgram, offAppHide, offAppShow, offAudioInterruptionBegin, offAudioInterruptionEnd, offCopyUrl, offError, offLocalServiceDiscoveryStop, offLocalServiceFound, offLocalServiceLost, offLocalServiceResolveFail, offPageNotFound, offThemeChange, offUnhandledRejection, offVoIPChatInterrupted, offVoIPChatMembersChanged, offVoIPChatSpeakersChanged, offVoIPChatStateChanged, offVoIPVideoMembersChanged, offWindowResize, onAppHide, onAppShow, onAudioInterruptionBegin, onAudioInterruptionEnd, onBackgroundAudioPause, onBackgroundAudioPlay, onBackgroundAudioStop, onBackgroundFetchData, onCopyUrl, onError, onLocalServiceDiscoveryStop, onLocalServiceFound, onLocalServiceLost, onLocalServiceResolveFail, onPageNotFound, onSocketClose, onSocketError, onSocketMessage, onSocketOpen, onThemeChange, onUnhandledRejection, onVoIPChatInterrupted, onVoIPChatMembersChanged, onVoIPChatSpeakersChanged, onVoIPChatStateChanged, onVoIPVideoMembersChanged, onWindowResize, openBusinessView, openCard, openChannelsActivity, openChannelsEvent, openChannelsLive, openCustomerServiceChat, openEmbeddedMiniProgram, openPrivacyContract, openQzonePublish, pageScrollTo, pauseBackgroundAudio, pauseVoice, playBackgroundAudio, playVoice, pluginLogin, preloadAssets, preloadSkylineView, preloadWebview, redirectTo, reLaunch, removeTabBarBadge, reportPerformance, requestDeviceVoIP, requestOrderPayment, requestPolymerPayment, requestSubscribeDeviceMessage, requirePrivacyAuthorize, reserveChannelsLive, saveFileToDisk, seekBackgroundAudio, sendSocketMessage, setBackgroundColor, setBackgroundTextStyle, setCustomDress, setEnable1v1Chat, setInnerAudioOption, setOfficialDress, setPageInfo, setTabBarBadge, setTabBarItem, setTabBarStyle, setWifiList, setWindowSize, shareFileMessage, shareToWeRun, shareVideoMessage, showActionSheet, showLoading, showModal, showRedPackage, showShareImageMenu, showTabBar, showTabBarRedDot, showToast, startFacialRecognitionVerify, startFacialRecognitionVerifyAndUploadVideo, startLocalServiceDiscovery, startPullDownRefresh, startRecord, startWifi, stopBackgroundAudio, stopLocalServiceDiscovery, stopPullDownRefresh, stopRecord, stopVoice, stopWifi, subscribeVoIPVideoMembers, switchTab, updateQQApp, updateShareMenu, updateVoIPChatMuteConfig, ocrIdCard, ocrBankCard, ocrDrivingLicense, ocrVehicleLicense, textReview, textToAudio, imageAudit, advancedGeneralIdentify, objectDetectIdentify, dishClassify, logoClassify, animalClassify, plantClassify, getSwanId, navigateToSmartGameProgram, navigateToSmartProgram, navigateBackSmartProgram, preloadSubPackage } from "@tarojs/taro-h5";
export { getCurrentPages } from "@tarojs/router";
